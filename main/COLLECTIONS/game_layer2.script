
-- starting values:
level  = 1
score  = 0
health = 10
emojis = 12
speed  = 42   -- percentage modifier which affects emojis speed, wait_timeout
level_bonus_unlocked = 4
level_bombs_unlocked = 8
bombs_amount = 1
bonus_requirement = 0
bullet_miss = 1
bullet_miss_level = 6
level_summary_delay = 0

bonus_can_spawn = false
orb_can_spawn = false
bonus_clock_active = false
bonus_level_active = false
change_music_variant = false
wait_for_summary = false

-- adds for level completion:
speed_add      = 4.12
emojis_add     = 4
health_add     = 1
health_perfect = 1

--summary var (for hall_of_fame):
total_kills = 0




--local variables:
local multi_counter_id, orbs_spawned

--local functions:
local level_prepare, bonus_level_prepare




function init(self)
	local id

	msg.post("/main#game_gui", "disable")
	wait_for_clean = true
	post_clean_start = false

	timer.delay(4, false, function()
		msg.post("/main#game_gui", "show_level_intro")
	end)

	timer.delay(10, false, function()
		msg.post("main:/main#title_menu_proxy", "unload")
		menu_proxy = false
	end)

	cursor_x = 0 ; cursor_y = 0
	cursor_light_id = factory.create("#cursor_light", vmath.vector3(cursor_x, cursor_y, 1))
end




function update(self, dt)
	if not wait_for_clean and post_clean_start then
		wait_for_clean = true
		post_clean_start = false
		if bonus_level_active == false then
			if level == 15 then emojis_add = 2 end

			if level == level_bonus_unlocked then
				bonus_requirement = 16 - 1
				timer.delay(1.4, false, function()
					msg.post("#game_gui", "show_bonus_available_info")
				end)

			elseif level == level_bombs_unlocked then
				timer.delay(1.4, false, function()
					msg.post("#game_gui", "show bombs info")
				end)

			elseif level == bullet_miss_level then
				if bullet_miss == 1 then bullet_miss = 5 else bullet_miss = bullet_miss * 2 end
				bullet_miss_level = bullet_miss_level + 4
				timer.delay(1.4, false, function()
					msg.post("#game_gui", "show bullet_miss info", {amount = bullet_miss})
				end)

			else
				msg.post("main#game_gui", "show_level_intro")
			end
		else
			msg.post("main#game_gui", "show_bonus_level_intro")
		end
	end




	if wait_for_summary then
		if socket.gettime() > level_summary_delay then
			wait_for_summary = false
			speed = speed + speed_add
			score = score + (level * 10)
			stat_score = stat_score + (level * 10)
			level = level + 1
			health = health + health_add
			emojis = emojis + emojis_add ; if emojis > 120 then emojis = 120 end
			msg.post("#game_gui", "hide_after_level")
			msg.post("#level_complete", "show", {killed = killed, escaped = escaped})
		end
	end


	if level_play == true then

		if health == 0 then
			level_play = false
			msg.post("#game_gui", "hide_after_level")
			msg.post("#game_over", "show", {killed = killed, escaped = escaped})
			sound.play("game_layer1:/main#fart", {gain = 0.6})

		elseif emojis_left == 0 then
			msg.post("#game_gui", "fade crosshair")
			level_play = false
			weapon_collide = false
			wait_for_summary = true
		end




		if bonus_can_spawn and level >= level_bonus_unlocked and not pause_id then
			--bonus_clock_spawn
			if rnd.range(1, 15000) >= 14997 and bonus_clock_visible == false and emojis_left >= bonus_requirement then
			-- if math.random(1, 12000) >= 1999 and bonus_clock_visible == false and killed > 1 and emojis_left >= 2 then
				msg.post("game_layer1:/main#ctrl", "bonus_clock")
				bonus_clock_visible = true
			end

			--bonus_level_spawn
			if rnd.range(1, 28000) >= 27998 and bonus_level_visible == false and emojis_left >= bonus_requirement then
			--if math.random(1, 20000) >= 9998 and bonus_level_visible == false and killed > 1 then
				msg.post("game_layer1:/main#ctrl", "bonus_level")
				bonus_level_visible = true
			end
		end

		-- orbs spawning
		if level > 1 and rnd.range(1, 40000) >= 40000 - (level * 2) and orbs_spawned < level * 1.4 and emojis_left >= 4 and orb_can_spawn then
		--if level > 0 and rnd.range(1, 40000) >= 36000 - (level * 2) and orbs_spawned < 10 and emojis_left >= 1 and orb_can_spawn then
			orbs_spawned = orbs_spawned + 1
			msg.post("game_layer1:/main#ctrl", "generate_orbs", {amount = 1, scale = 0.001})
		end




	else
		-- disable effect of active bonus_clock
		if bonus_clock_active == true then
			msg.post(clock_url, "delete_clock")
			bonus_clock_active = false
		end

		-- reset bonuses visible status (they can appear again)
		bonus_clock_visible = false
		if level_url ~= nil then msg.post(level_url, "delete clover") end
		bonus_level_visible = false
	end


	if bonus_level_active == 1 and bonus_shots == 0 then
		bonus_shots = -1
		timer.delay(.1, false, function()
			weapon_collide = false
			score = score + bonus_score
			stat_score = stat_score + bonus_score
			total_kills = total_kills + bonus_level_kills.small + bonus_level_kills.big
			msg.post("game_layer2:/main#game_gui", "hide_after_level")
			msg.post("game_layer1:/main#ctrl", "fade_out_add_music", {time = 10})
			msg.post("game_layer1:/main#ctrl", "bonus level emoji at end")
			timer.delay(4, false, function() msg.post("#bonus_level_complete", "show") end)
			msg.post("game_layer1:/main#ctrl", "fade_in_music", {time = 4, delay = 8, start_new = false, continue = true})
			fade_darkness(4, darkness_level_temp)
		end)
	end
end




function on_message(self, message_id, message, sender)
	local id

	if message_id == hash("level_start") then
		main_menu_visible = false
		if not bonus_level_active then
			level_prepare()
		else
			bonus_level_prepare()
		end




	-- light particles behind complete screens
	elseif message_id == hash("light_particle") then
		local delay, id
		if message.delay == nil then delay = 0 else delay = message.delay end

		timer.delay(delay, false, function()
			if message.enabled then
				particlefx.play("#light_particle")
				particlefx.set_constant("#light_particle", "center", "tint", vmath.vector4(1 * darkness_level))
			else
				particlefx.stop("#light_particle")
			end
		end)




	elseif message_id == hash("spawn_blood") then
		id = factory.create("game_layer2:/main#blood_factory", vmath.vector3(message.x, message.y, message.z), nil, nil,
		rnd.range(message.scale - message.scale / 3 , message.scale + message.scale / 3) / 100)
		if message.a <= 2 then msg.post(id, "animate_blood_scale", {multiplier = message.multiplier}) end
		table.insert(blood_table, id) ; blood_go_id = id




	elseif message_id == hash("show charged_combo display") then
		multi_counter_id = factory.create("/main#multi_counter_factory")
		msg.post(multi_counter_id, "charged_combo text -final", {amount = message.amount, dark = message.dark, score = message.score, charged = message.charged, pos = message.pos, longer = message.longer})




	elseif message_id == hash("reset anim") then
		for _, id in ipairs(BG_table) do msg.post(id, "reset anim") end
	end
end




function on_input(self, action_id, action)
	if action_id == hash("pause") and action.pressed then pause("main:/main#game_proxy1") end
	
	if pause_id == nil then
		go.set(cursor_light_id, "position", vmath.vector3(action.x, action.y, 1))

		if action_id == hash("click1") and action.pressed == true then
			msg.post("game_layer1:/main#ctrl", "spawn_weapon", {x = action.x, y = action.y})
			shot_x = action.x ; shot_y = action.y
			msg.post("#game_gui", "animate cursor")
			if bonus_level_active == 1 and weapon_collide then
				bonus_shots = bonus_shots - 1
				msg.post("game_layer2:/main#game_gui", "bonus_display_update")
			end
		end
	end
end




function level_prepare()
	escaped = 0 ; killed = 0
	emojis_left = emojis
	bonus_can_spawn = false
	orbs_spawned = 0
	orb_can_spawn = false
	bonus_requirement = bonus_requirement + 1
	blood_table = {}
	bomb_table = {}
	orb_table = {}
	level_play = true
	if level > level_bombs_unlocked and level % 2 == 0 then
		bombs_amount = bombs_amount + 1
	end
	if level > stat_level_record then
		stat_level_record = level
	end

	msg.post("game_layer1:/main#ctrl", "get bonuses_delay_time")
	msg.post("game_layer1:/main#ctrl", "generate_emojis", {emojis = emojis, scale = 1})
	if level >= level_bombs_unlocked then
		msg.post("game_layer1:/main#ctrl", "generate_bombs", {amount = bombs_amount, scale = 0.5})
		bombs_left = bombs_amount
	end
	msg.post("/main#game_gui", "display_update")
end




function bonus_level_prepare()
	bonus_shots = 20 ; bonus_level_kills = {small = 0, big = 0} ; bonus_score = 0 ; killed = 0
	blood_table = {}
	-- emoji generation moved to game_gui, so there is more time to arrange them on screen
end

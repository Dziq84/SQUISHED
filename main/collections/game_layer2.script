
-- starting values:
level  = 1
score  = 0
health = 5
emojis = 10
speed  = 0   -- (speed.self - this value as percentage)
--wait   = 0   --  forward declaration

bonus_clock_active = false
bonus_level_active = false
player_bonus_item = ""  --current bonus for use

-- adds for level completion:
emojis_add     = 2
speed_add      = 2.84
health_add     = 1
health_perfect = 1

--summary var:
total_kills = 0




--local variables:
local level_play, crosshair_light_id = false, false

--local functions:
local level_prepare, bonus_level_prepare




function init(self)
	msg.post("/main#game_gui", "disable")

	timer.delay(4, false, function ()
		msg.post("/main#game_gui", "show_level_intro")
	end)

	timer.delay(10, false, function ()
		msg.post("main:/main#title_menu_proxy", "unload")
		menu_proxy = false
	end)
end




function update(self, dt)
	if level_play == true then

		if health == 0 then
			level_play = false
			msg.post("game_layer2:/main#game_gui", "hide_after_level")
			msg.post("game_layer2:/main#game_over", "show", {killed = killed, escaped = escaped})

		elseif emojis_left == 0 then
			level_play = false
			level = level + 1
			health = health + health_add
			emojis = emojis + emojis_add
			speed = speed + speed_add - (level / 8)
			--wait = wait - (speed / 100) + (level / 8)

			msg.post("game_layer2:/main#game_gui", "hide_after_level")
			msg.post("game_layer2:/main#level_complete", "show", {killed = killed, escaped = escaped})
		end


		--bonus_clock_spawn
		if math.random(1, 12000) == 12000 and bonus_clock_visible == false and player_bonus_item == "" and killed > 5 and emojis_left >= 20 then
			msg.post("game_layer1:/main#ctrl", "bonus_clock")
			bonus_clock_visible = true
		end

		--bonus_level_spawn
		if math.random(1, 20000) >= 19999 and bonus_level_visible == false and player_bonus_item == "" and emojis_left >= 10 and killed >= 10 and level >= 2 then
			msg.post("game_layer1:/main#ctrl", "bonus_level")
			bonus_level_visible = true
		end


	else
		if dark_mode and crosshair_light_id then
			go.delete(crosshair_light_id)
			crosshair_light_id = false
		end

		-- disable effect of active bonus_clock
		if bonus_clock_active == true then
			msg.post(clock_url, "delete_clock")
			bonus_clock_active = false
		end

		-- reset bonuses visible status (they can appear again)
		bonus_clock_visible = false
		bonus_level_visible = false
	end


	if bonus_level_active == 1 and bonus_shots == 0 then
		bonus_shots = -1
		timer.delay(.1, false, function()
			weapon_collide = false
			score = score + bonus_score
			total_kills = total_kills + bonus_level_kills.small + bonus_level_kills.big
			msg.post("game_layer2:/main#game_gui", "hide_after_level")
			msg.post("game_layer1:/main#ctrl", "fade_out_add_music")
			msg.post("game_layer1:/main#ctrl", "bonus level emoji at end")
			timer.delay(4, false, function() msg.post("#bonus_level_complete", "show") end)
			msg.post("game_layer1:/main#ctrl", "fade_in_music", {time = 2})
		end)
	end
end




function on_message(self, message_id, message, sender)
	local id

	if message_id == hash("level_start") then
		msg.post(".", "acquire_input_focus")
		main_menu_visible = false
		if not bonus_level_active then
			level_prepare()
		else
			bonus_level_prepare()
		end


	elseif message_id == hash("spawn_blood") then
		id = factory.create("game_layer2:/main#blood_factory", vmath.vector3(message.x, message.y, message.z), nil, nil,
		rnd.range(message.scale - message.scale / 3 , message.scale + message.scale / 3) / 100)
		if message.a <= 2 then msg.post(id, "animate_blood_scale", {multiplier = message.multiplier}) end
		table.insert(blood_table, id) ; blood_go_id = id


	elseif message_id == hash("reset anim") then
		for _, id in ipairs(BG_table) do msg.post(id, "reset anim") end
	end
end




function on_input(self, action_id, action)
	if action_id == hash("pause") and action.pressed then pause("main:/main#game_proxy1") end
	
	if pause_id == nil then
		if dark_mode and crosshair_light_id then
			go.set(crosshair_light_id, "position", vmath.vector3(action.x, action.y, 1))
		end

		if action_id == hash("click1") and action.pressed == true then
			msg.post("game_layer1:/main#ctrl", "spawn_weapon", {x = action.x, y = action.y})
			cursor_x = action.x ; cursor_y = action.y
			msg.post("#game_gui", "animate cursor")
			if bonus_level_active == 1 and weapon_collide then
				bonus_shots = bonus_shots - 1
				msg.post("game_layer2:/main#game_gui", "bonus_display_update")
			end
		end
	end
end




function level_prepare()
	escaped = 0 ; killed = 0
	emojis_left = emojis
	blood_table = {}
	msg.post("game_layer1:/main#ctrl", "generate_emojis", {emojis = emojis, scale = 1})
	weapon_collide = true
	level_play = true

	if dark_mode then
		crosshair_light_id = factory.create("#crosshair_light")
	end
end




function bonus_level_prepare()
	bonus_shots = 20 ; bonus_level_kills = {small = 0, big = 0} ; bonus_score = 0 ; killed = 0
	blood_table = {}
	-- emoji generation moved to game_gui.gui, so there is more time to arrange them on screen
	weapon_collide = true
end

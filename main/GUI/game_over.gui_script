
function init(self)
	msg.post("#", "disable")
end




function on_message(self, message_id, message, sender)
	local menu_color = gui.get_color(gui.get_node("LOSE"))

	if message_id == hash("show") then
		-- prepare GUI:
		gui.set_color(gui.get_node("LOSE"), vmath.vector4(1,1,1,0))
		gui.set_color(gui.get_node("BG"), vmath.vector4(0,0,0,0))
		gui.set_scale(gui.get_node("killed"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("escaped"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("killed_count"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("escaped_count"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("box1"), vmath.vector3(0,0,1))
		gui.set_enabled(gui.get_node("box1"), false)

		gui.animate(gui.get_node("LOSE"), "color", menu_color, gui.EASING_LINEAR, .8)
		gui.animate(gui.get_node("BG"), "color", vmath.vector4(0,0,0,1), gui.EASING_LINEAR, 2)

		-- set updated text on nodes:
		gui.set_text(gui.get_node("killed_count"), message.killed)
		gui.set_text(gui.get_node("escaped_count"), message.escaped)

		gui.animate(gui.get_node("killed"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1, 0, function()
			sound.play("game_layer1:/main#win_count")
			gui.animate(gui.get_node("killed_count"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1)
		end)

		gui.animate(gui.get_node("escaped"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1, 1.2, function()
			sound.play("game_layer1:/main#win_count", {speed = .5})
			gui.set_enabled(gui.get_node("box1"), true)
			gui.animate(gui.get_node("escaped_count"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1, 0)
		end)

		gui.animate(gui.get_node("box1"), "scale", vmath.vector3(1, 1, 1), gui.EASING_INSINE, 1.2, 1.1)

		weapon_collide = false
		msg.post("game_layer1:/main#ctrl", "fade_music")
		msg.post("#", "enable")




	elseif message_id == hash("hide") then
		gui.animate(gui.get_node("box1"), "color", vmath.vector4(1,1,1,0), gui.EASING_INSINE, 1)
		gui.animate(gui.get_node("box1"), "scale", vmath.vector3(0,0,0), gui.EASING_INSINE, 1)
		gui.animate(gui.get_node("LOSE"), "color", vmath.vector4(1,1,1,0), gui.EASING_INSINE, 1.2)
		gui.animate(gui.get_node("BG"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.1)

		timer.delay(.4, false, function()
			post_game = true
			msg.post("main:/main#title_menu_proxy", "async_load")
		end)

		msg.post("game_layer1:/main#ctrl", "play_hall_music")

		gui.set_enabled(gui.get_node("crosshair"), false)
		msg.post("game_layer1:/main#ctrl", "clean_emojis")
		if #blood_table > 0 then msg.post(blood_go_id, "clean_blood") end

		msg.post(".", "release_input_focus")

		timer.delay(4, false, function()
			gui.reset_nodes() ; msg.post("#", "disable")
		end)




	elseif message_id == hash("proxy_loaded") then
			pprint(tostring(sender).." LOADED")

			msg.post(sender, "init")
			msg.post(sender, "enable")
	end
end




function on_input(self, action_id, action)
	if pause_id == nil then
		if action_id == nil then
			gui.set_position(gui.get_node("crosshair"), vmath.vector3(action.x, action.y, 1))
		end


		if gui.pick_node(gui.get_node("box1"), action.x, action.y) and action_id == hash("click1") and gui.is_enabled(gui.get_node("box1")) and action.pressed then
			BG_active = false
			msg.post("#", "hide")
		end
	end
end

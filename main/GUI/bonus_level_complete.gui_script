
--local functions:
local prepare_gui, start_counting, finalise_gui, hide_gui


--local variables:
local allow_continue, menu_col, points_col
local anim_next_node = false




function init(self)
	msg.post("#", "disable")
end



function on_message(self, message_id, message)
	if message_id == hash("show") then
		allow_continue = false
		prepare_gui()
		start_counting("small", 10, false)
	end
end




function on_input(self, action_id, action)
	local pos

	if pause_id == nil then
		if action_id == nil then
			gui.set_position(gui.get_node("crosshair"), vmath.vector3(action.x, action.y, 1))
		end


		if allow_continue then
			if gui.pick_node(gui.get_node("box1"), action.x, action.y) then
				if not anim_next_node then
					anim_next_node = true
					animate_node(gui.get_node("box1"), vmath.vector3(1,1,1), .06, "x")
					animate_node(gui.get_node("next_level"), vmath.vector3(.48, .5, 1), .08)
				end

				if action_id == hash("click1") and action.pressed then
					sound.play("main:/main#button_press")
					allow_continue = false
					hide_gui()
				end
			else
				gui.animate(gui.get_node("box1"), "scale", vmath.vector3(1,1,1), go.EASING_INOUTSINE, 1)
				gui.animate(gui.get_node("next_level"), "scale", vmath.vector3(.48, .5, 1), go.EASING_INOUTSINE, 1)
				anim_next_node = false
			end
		end
	end
end




function prepare_gui()
	local node, col
	menu_col = gui.get_color(gui.get_node("WIN"))
	points_col = gui.get_color(gui.get_node("small_="))

	--gui.set_color(gui.get_node("WIN"), vmath.vector4(1,1,1,0))
	gui.set_color(gui.get_node("BG"), vmath.vector4(0,0,0,0))
	gui.set_scale(gui.get_node("total_points"), vmath.vector3(0,0,0))
	gui.set_scale(gui.get_node("total_points_amount"), vmath.vector3(0,0,0))
	gui.set_scale(gui.get_node("box1"), vmath.vector3(0,0,1))

	gui.set_scale(gui.get_node("small"), vmath.vector3(0,0,1))
	gui.set_scale(gui.get_node("small_count"), vmath.vector3(0,0,1))
	gui.set_scale(gui.get_node("small_x"), vmath.vector3(0,0,1))
	gui.set_color(gui.get_node("small_="), vmath.vector4(points_col.x, points_col.y, points_col.z , 0))
	gui.set_scale(gui.get_node("big"), vmath.vector3(0,0,1))
	gui.set_scale(gui.get_node("big_count"), vmath.vector3(0,0,0,1))
	gui.set_scale(gui.get_node("big_x"), vmath.vector3(0,0,1))
	gui.set_color(gui.get_node("big_="), vmath.vector4(points_col.x, points_col.y, points_col.z , 0))

	node = gui.get_node("complete_bonus_health") ; col = gui.get_color(node)
	gui.set_color(node, vmath.vector4(col.x, col.y, col.z ,0))
	node = gui.get_node("complete_bonus_points") ; col = gui.get_color(node)
	gui.set_color(node, vmath.vector4(col.x, col.y, col.z ,0))

	for a = 1, 4 do
		gui.set_color(gui.get_node("clover"..a), vmath.vector4(1,1,1,0))
	end

	gui.animate(gui.get_node("WIN"), "color", menu_col, gui.EASING_LINEAR, .8)
	gui.animate(gui.get_node("BG"), "color", vmath.vector4(0,0,0,1), gui.EASING_LINEAR, 2)

	for a = 1, 4 do
		gui.animate(gui.get_node("clover"..a), "color.w", 1, gui.EASING_LINEAR, 1)
	end

	timer.delay(1, false, function()
		gui.play_particlefx(gui.get_node("particlefx"))
		msg.post("/main#ctrl", "light_particle", {enabled = true})
	end)
	msg.post("#", "enable")
end




function start_counting(node, multiplier, stop)
	local a, count = 0, bonus_level_kills[node]

	gui.animate(gui.get_node(node), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1, 0, function()
		sound.play("game_layer1:/main#win_count")
		gui.animate(gui.get_node(node.."_count"), "scale", vmath.vector3(1, 1, 1), gui.EASING_OUTELASTIC, 1)
	end)

	if bonus_level_kills[node] > 0 then
		gui.animate(gui.get_node(node.."_x"), "scale", vmath.vector3(.4, .4, 1), gui.EASING_OUTELASTIC, 1)
	end

	timer.delay(1, false, function()
		for a = 0, count do
			timer.delay(0.1 * a, false, function()
				gui.set_text(gui.get_node(node.."_count"), a)
				sound.play("game_layer1:/main#win_count", {speed = 4})
				if a == count and a > 0 then
					gui.set_text(gui.get_node(node.."_points"), count * multiplier)
					gui.animate(gui.get_node(node.."_="), "color.w", 1, gui.EASING_OUTELASTIC, 1, 0, function()
						gui.animate(gui.get_node(node.."_x"), "color.w", 0, gui.EASING_LINEAR, .2, .2)
						gui.animate(gui.get_node(node.."_="), "position.y", 7, gui.EASING_OUTELASTIC, .8, .2, function()
							if not stop then
								start_counting("big", 50, true)
							else
								total_points()
							end
						end)
					end)
				elseif a == count and a == 0 then
					if not stop then
						start_counting("big", 50, true)
					else
						total_points()
					end
				end
			end)
		end
	end)
end




function total_points()
	sound.play("game_layer1:/main#win_count")
	gui.animate(gui.get_node("total_points"), "scale", vmath.vector3(.34, .34, 1), gui.EASING_OUTELASTIC, 1.2, 0, function()
		sound.play("game_layer1:/main#win_count")
		gui.set_text(gui.get_node("total_points_amount"), bonus_score)
		gui.animate(gui.get_node("total_points_amount"), "scale", vmath.vector3(1.6, 1.6, 1), gui.EASING_OUTELASTIC, 1.2, .4)
		finalise_gui()
	end)
end




function finalise_gui()
	gui.animate(gui.get_node("box1"), "scale", vmath.vector3(1, 1, 1), gui.EASING_INSINE, 1.2, 0, function()
		allow_continue = true
	end)
end




function hide_gui()
	node = gui.get_node("complete_bonus_health")
	gui.set_text(node, "+"..health_add)
	gui.animate(node, "color.w", 1, gui.EASING_INSINE, .1, 0, function()
		gui.animate(node, "color.w", 0, gui.EASING_INSINE, 2.4)
	end)
	pos = gui.get_position(node)
	pos.x = pos.x + math.random(220, 360) ; pos.y = pos.y + math.random(220, 360)
	gui.animate(node, "position", vmath.vector3(pos.x, pos.y, 1), gui.EASING_INSINE, 1.6)
	gui.animate(node, "scale", vmath.vector3(2.4, 2.4, 1), gui.EASING_INSINE, 1.5)

	node = gui.get_node("complete_bonus_points")
	gui.set_text(node, "+ "..((level - 1) * 10).." points")
	gui.animate(node, "color.w", 1, gui.EASING_INSINE, .1, 0, function()
		gui.animate(node, "color.w", 0, gui.EASING_INSINE, 3.2, 1)
	end)
	pos = gui.get_position(node)
	pos.x = pos.x - math.random(80, 100) ; pos.y = pos.y - math.random(220, 260)
	gui.animate(node, "position", vmath.vector3(pos.x, pos.y, 1), gui.EASING_INSINE, 2.4)
	gui.animate(node, "scale", vmath.vector3(2.4, 2.4, 1), gui.EASING_INSINE, 2.5)

	gui.animate(gui.get_node("box1"), "color", vmath.vector4(1,1,1,0), gui.EASING_INSINE, 1)
	gui.animate(gui.get_node("box1"), "scale", vmath.vector3(0,0,0), gui.EASING_INSINE, 1)
	gui.animate(gui.get_node("WIN"), "color", vmath.vector4(1,1,1,0), gui.EASING_INSINE, 1.2)
	gui.animate(gui.get_node("BG"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.1)
	gui.animate(gui.get_node("overlay"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.1)

	for a = 1, 4 do
		gui.set_color(gui.get_node("clover"..a), vmath.vector4(1,1,1,0))
	end

	gui.stop_particlefx(gui.get_node("particlefx"))
	timer.delay(.6, false, function() msg.post("/main#ctrl", "light_particle", {enabled = false}) end)
	gui.set_enabled(gui.get_node("crosshair"), false)
	msg.post(emoji_url, "clean_emojis", {continue = true})
	msg.post(bomb_url,  "clean_bombs")
	if #orb_table > 0 then msg.post(orb_url, "clean_orbs") end
	if #blood_table > 0 then msg.post(blood_go_id, "clean_blood") end

	bonus_level_active = false
	post_clean_start = true
	msg.post("game_layer2:/main#game_gui", "hide_after_level")
	msg.post("#ctrl", "reset anim")

	timer.delay(6, false, function()
		gui.reset_nodes() ; msg.post("#", "disable")
	end)
end

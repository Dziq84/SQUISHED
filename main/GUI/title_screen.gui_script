local right_click_delay, right_click_timeout, click_pos_x, click_pos_y = 0, 0, 0,0
local letter_pos, letter_col = {}, {}

allow_title_clicks = false
allow_title_emojis = true

local menu_emoji_amount = 80

local emoji_delay
local title_music_delay


--local variables:
local text_dziq_pos, text_dziq_rot, dziq_image_pos, dziq_image_rot, presents_pos, start_allow, new_game_pos, hall_of_fame_pos
local anim_new_game_node, anim_hall_node, anim_info_node = false, false, false

--local functions:
local title_prepare, intro, post_intro, fade_gui




function init(self)
	msg.post("#", "acquire_input_focus")
	main_menu_visible = true
	menu_proxy = true

	if post_game == false then
		if play_intro == true then 
			defold_logo()
		else
			title_prepare()
		end
	else
		msg.post("#", "disable")
		msg.post("title:/hall#hall_of_fame", "show")
	end
end




function on_message(self, message_id, message, sender)
	if message_id == hash("post_game_show") then
		msg.post("main:/main#game_proxy1", "unload")
		msg.post("main:/main#game_proxy2", "unload")
		msg.post("#", "enable")
		msg.post("#", "acquire_input_focus")
		title_prepare()


	elseif message_id == hash("hide_gui") then
		fade_gui(3)
		msg.post("#ctrl", "hide_main_menu")
		sound.play("#game_start")
	end
end




function update(self, dt)
	if socket.gettime() > right_click_timeout then click_pos_x, click_pos_y = 0, 0 end
end




function on_input(self, action_id, action)
	if action_id == hash("pause") and action.pressed then pause("main:/main#title_menu_proxy") end

	if pause_id == nil then
		if action_id == nil then
			gui.set_position(gui.get_node("crosshair"), vmath.vector3(action.x, action.y, 1))

		elseif action_id == hash("click2") and allow_title_clicks == true and socket.gettime() > right_click_delay then
			if action.x > click_pos_x + 60 or action.x < click_pos_x - 60 or action.y > click_pos_y + 60 or action.y < click_pos_y - 60 then
				click_pos_x = action.x ; click_pos_y = action.y
				factory.create("#click_factory", vmath.vector3(action.x, action.y, 1), nil, nil, rnd.range(25, 35) / 10)
				right_click_delay = socket.gettime() + 0.04
				right_click_timeout = socket.gettime() + 4
			end

		end

		if start_allow == true then

			if gui.pick_node(gui.get_node("NEW_GAME"), action.x, action.y) then
				if not anim_new_game_node then
					anim_new_game_node = true
					animate_node(gui.get_node("NEW_GAME"), vmath.vector3(1, 1, 1), .06, "x")
					animate_node(gui.get_node("new_game_text"), vmath.vector3(.75, .75, 1), .08)
				end

				if action_id == hash("click1") and action.pressed then
					gui.cancel_animation(gui.get_node("NEW_GAME"), "scale")
					gui.cancel_animation(gui.get_node("new_game_text"), "scale")
					msg.post("/main#ctrl", "menu_end")
					sound.play("main:/main#button_press")
					start_allow = false
				end
			else
				gui.animate(gui.get_node("NEW_GAME"), "scale", vmath.vector3(1, 1, 1), go.EASING_INOUTSINE, 1)
				gui.animate(gui.get_node("new_game_text"), "scale", vmath.vector3(.75, .75, 1), go.EASING_INOUTSINE, 1)
				anim_new_game_node = false
			end




			if gui.pick_node(gui.get_node("HALL_OF_FAME"), action.x, action.y) then
				if not anim_hall_node then
					anim_hall_node = true
					animate_node(gui.get_node("HALL_OF_FAME"), vmath.vector3(.8, .8, 1), .06, "x")
					animate_node(gui.get_node("hall_node_text"), vmath.vector3(.75, .75, 1), .08)
				end

				if action_id == hash("click1") and action.pressed then
					gui.cancel_animation(gui.get_node("HALL_OF_FAME"), "scale")
					gui.cancel_animation(gui.get_node("hall_node_text"), "scale")
					msg.post("/hall#hall_of_fame", "show")
					msg.post(".", "release_input_focus")
					sound.play("main:/main#button_press")
				end

			else
				gui.animate(gui.get_node("HALL_OF_FAME"), "scale", vmath.vector3(.8, .8, 1), go.EASING_INOUTSINE, 1)
				gui.animate(gui.get_node("hall_node_text"), "scale", vmath.vector3(.75, .75, 1), go.EASING_INOUTSINE, 1)
				anim_hall_node = false
			end




			if gui.pick_node(gui.get_node("INFO"), action.x, action.y) then
				if not anim_info_node then
					anim_info_node = true
					animate_node(gui.get_node("INFO"), vmath.vector3(.7, .7, 1), .06, "x")
					animate_node(gui.get_node("info_node_text"), vmath.vector3(.75, .75, 1), .08)
				end

				if action_id == hash("click1") and action.pressed then
					gui.cancel_animation(gui.get_node("INFO"), "scale")
					gui.cancel_animation(gui.get_node("info_node_text"), "scale")
					sound.play("main:/main#button_press")
					-- msg.post("/main#ctrl", "menu_end")
					-- start_allow = false
				end
			else
				gui.animate(gui.get_node("INFO"), "scale", vmath.vector3(.7, .7, 1), go.EASING_INOUTSINE, 1)
				gui.animate(gui.get_node("info_node_text"), "scale", vmath.vector3(.75, .75, 1), go.EASING_INOUTSINE, 1)
				anim_info_node = false
			end
		end
	end
end




function defold_logo()

	local logo = gui.get_node("DEFOLD LOGO")
	local text = gui.get_node("DEFOLD TEXT")

	gui.set_color(logo, vmath.vector4(1,1,1,0))
	gui.set_color(text, vmath.vector4(1,1,1,0))

	sound.play("/main#logo")

	gui.animate(logo, "color", vmath.vector4(1,1,1,1), gui.EASING_LINEAR, 1, 0, function ()
		--gui.animate(logo, "position.y", 1180, gui.EASING_LINEAR, 1, 1)
		--gui.animate(logo, "scale", vmath.vector3(.5, .5, .5), gui.EASING_LINEAR, 1, 1)
		gui.animate(logo, "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 2, 1.6)
	end)

	gui.animate(text, "color", vmath.vector4(.2, .2, .2, .8), gui.EASING_LINEAR, 1.2, 1)
	title_prepare()
end




function title_prepare()
	if play_intro == true then title_music_delay = 7 else title_music_delay = 0 end

	msg.post("/main#ctrl", "start_menu_music", {delay = title_music_delay})

	load_config()

	gui.set_enabled(gui.get_node("version_number"), false)
	gui.set_color(gui.get_node("stars"), vmath.vector4(0,0,0,0))

	text_dziq_pos = gui.get_position(gui.get_node("text_dziq"))
	text_dziq_rot = gui.get_rotation(gui.get_node("text_dziq"))
	dziq_image_pos = gui.get_position(gui.get_node("dziq"))
	dziq_image_rot = gui.get_rotation(gui.get_node("dziq"))
	presents_pos = gui.get_position(gui.get_node("text_presents"))
	new_game_pos = gui.get_position(gui.get_node("NEW_GAME"))
	hall_of_fame_pos = gui.get_position(gui.get_node("HALL_OF_FAME"))
	info_pos = gui.get_position(gui.get_node("INFO"))

	gui.set_position(gui.get_node("dziq"), vmath.vector3(1600, dziq_image_pos.y, 0))
	gui.set_position(gui.get_node("text_dziq"), vmath.vector3(-1000, 400, 0))
	gui.set_position(gui.get_node("text_presents"), vmath.vector3(2000, 900, 0))
	gui.set_color(gui.get_node("BG"), vmath.vector4(0,0,0,0))
	gui.set_position(gui.get_node("NEW_GAME"), vmath.vector3(new_game_pos.x, new_game_pos.y - 600, 1))
	gui.set_position(gui.get_node("HALL_OF_FAME"), vmath.vector3(hall_of_fame_pos.x, hall_of_fame_pos.y - 500, 1))
	gui.set_position(gui.get_node("INFO"), vmath.vector3(info_pos.x, info_pos.y - 400, 1))

	for a = 1,8 do
		letter_pos[a] = gui.get_position(gui.get_node(a))
		gui.set_enabled(gui.get_node(a), false)
	end

	if play_intro == false then
		emoji_delay = 3
		gui.animate(gui.get_node("BG"), "color", vmath.vector4(1, 1, 1, .8), gui.EASING_LINEAR, 2, 1.6)
		gui.set_enabled(gui.get_node("dziq"), false)
		gui.set_enabled(gui.get_node("text_dziq"), false)
		gui.set_enabled(gui.get_node("text_presents"), false)
		gui.set_enabled(gui.get_node("DEFOLD LOGO"), false)
	else
		gui.animate(gui.get_node("BG"), "color", vmath.vector4(1, 1, 1, .8), gui.EASING_LINEAR, 6, 3.4)
		emoji_delay = 11.2
	end

	timer.delay(emoji_delay, false, function()
		generate_emojis(menu_emoji_amount, "#emoji_factory")
		gui.play_particlefx(gui.get_node("menu3"))
	end)

	if play_intro == true then
		timer.delay(3.2, false, intro)
	else
		post_intro()
	end
end




function intro()
	gui.animate(gui.get_node("text_dziq"), "position", text_dziq_pos, gui.EASING_LINEAR, 1, 0.25, function ()
		gui.animate(gui.get_node("text_dziq"), "position.x", 1800, gui.EASING_INQUINT, 2.2, 2.4)
	end)

	-- >>  small rotation on hrumk sound
	gui.animate(gui.get_node("text_dziq"), "rotation.z", text_dziq_rot.z - 24, gui.EASING_INBOUNCE, .1, 1.6, function ()
		gui.animate(gui.get_node("text_dziq"), "rotation.z", text_dziq_rot.z + 28, gui.EASING_INBOUNCE, .1, .18)
	end)
	--
	gui.animate(gui.get_node("dziq"), "position.y", dziq_image_pos.y + 36, gui.EASING_INBOUNCE, .1, 1.6)
	gui.animate(gui.get_node("dziq"), "rotation.z", dziq_image_rot.z - 18, gui.EASING_INBOUNCE, .1, 1.6, function ()
		gui.animate(gui.get_node("dziq"), "position.y", dziq_image_pos.y - 10, gui.EASING_INBOUNCE, .2, .16)
		gui.animate(gui.get_node("dziq"), "rotation.z", dziq_image_rot.z + 4, gui.EASING_INBOUNCE, .2, .18)
	end)
	-- <<
	gui.animate(gui.get_node("text_presents"), "position", presents_pos, gui.EASING_LINEAR, 1, 0.25, function ()
		gui.animate(gui.get_node("text_presents"), "position.x", -1000, gui.EASING_INQUINT, 2.2, 2.4)
	end)

	gui.animate(gui.get_node("dziq"), "position.x", dziq_image_pos.x, gui.EASING_OUTSINE, 1, 1, function ()
		gui.animate(gui.get_node("text_dziq"), "rotation.z", text_dziq_pos.z, gui.EASING_LINEAR, .6, .8)
		gui.animate(gui.get_node("dziq"), "rotation.z", dziq_image_rot.z + 8, gui.EASING_INSINE, 2, .35)
		gui.animate(gui.get_node("dziq"), "position.x", 2000, gui.EASING_INQUINT, 2, .45, function ()
			gui.set_enabled(gui.get_node("dziq"), false)
		end)
	end)

	sound.play("#hrumk", {delay = 1.25, gain = 2, pan = 0})

	timer.delay(5, false, post_intro)
end



local function title_animate(self, node, pos)
	pos_x = rnd.range(pos.x - 8, pos.x + 8)
	pos_y = rnd.range(pos.y - 14, pos.y + 14)
	gui.animate(node, "position", vmath.vector3(pos_x, pos_y, 1), gui.EASING_INOUTSINE, rnd.range(22, 36) / 10, 0, function()
		title_animate(self, node, pos)
	end)
end


local function title_colors(self, node, col, dir)
	if dir == 1 then
		col= col + 0.02
		if col > 1 then col = 1 ; dir = 0 end
	else
		col = col - 0.02
		if col < .74 then col = .74 ; dir = 1 end
	end
	gui.animate(node, "color", vmath.vector4(col - .26, col - .18, col, 1), gui.EASING_LINEAR, .2, 0, function()
		title_colors(self, node, col, dir)
	end)
	gui.animate(node, "outline", vmath.vector4((col - .52) / 3.2, (col - .36) / 2.4, col / 1.64, 1), gui.EASING_LINEAR, .2, 0)
end




function post_intro()
	local color = 1 ; local dir = 1

	gui.play_particlefx(gui.get_node("menu1"))
	timer.delay(5, false, function ()
		if start_allow == true then
			gui.play_particlefx(gui.get_node("menu2"))
		end
	end)

	gui.animate(gui.get_node("NEW_GAME"), "position.y", new_game_pos.y, gui.EASING_OUTELASTIC, 1.1, 4.5, function()
		start_allow = true
		allow_title_clicks = true
		sound.play("#menu_start_button", {delay = 0, gain = .44, pan = 0})
		gui.set_enabled(gui.get_node("version_number"), true)
		local node = gui.get_node("menu_center")
		local emitter_menu_center = gui.play_particlefx(node)
		gui.set_color(node, vmath.vector4(0,0,0,0))
		gui.animate(node, "color", vmath.vector4(1,1,1,1), gui.EASING_LINEAR, 2, .22)
	end)
	gui.animate(gui.get_node("HALL_OF_FAME"), "position.y", hall_of_fame_pos.y, gui.EASING_OUTELASTIC, 1.2, 4)
	gui.animate(gui.get_node("INFO"), "position.y", info_pos.y, gui.EASING_OUTELASTIC, 1.2, 3.5)

	gui.animate(gui.get_node("stars"), "color", vmath.vector4(.1, .14, .18, 0.1), gui.EASING_LINEAR, 8, 1.2)

	for a = 1,8 do
		local node = gui.get_node(a)
		local pos = letter_pos[a]
		letter_pos[a] = color ; local col = letter_pos[a]

		gui.set_enabled(node, true)
		gui.set_color(node, vmath.vector4(color - .12, color - .08, color, 1)) ; color = color - 0.06

		pos_x, pos_y = get_offscreen_pos(200)

		-- set new letter position outside of screen and animate it to original position
		gui.set_position(node, vmath.vector3(pos_x, pos_y, 0))
		gui.set_shadow(node, vmath.vector4(.1, .14, .18, 0))
		local random = rnd.range(3, 6)
		gui.animate(node, "shadow.w", 1, gui.EASING_LINEAR, random, 1)

		gui.animate(node, "position", pos, gui.EASING_OUTELASTIC, random, 1, function ()
			title_animate(self, node, pos)
		end)

		gui.animate(node, "color", vmath.vector4(col - .12, col - .04, col, 1), gui.EASING_LINEAR, .4, 0, function ()
			title_colors(self, node, col, dir)
		end)

		gui.animate(node, "outline", vmath.vector4((col - .12) /2, (col - .04) /2, col/ 2, 1), gui.EASING_LINEAR, .4, 0)
	end
end




function fade_gui()
	local a, pos_x, pos_y, node

	msg.post("#", "release_input_focus")

	for a = 1, 8 do
		node = gui.get_node(a)
		pos_x, pos_y = get_offscreen_pos(400)
		gui.animate(node, "position", vmath.vector3(pos_x, pos_y, 1), gui.EASING_INEXPO, 3)
	end

	node = gui.get_node("NEW_GAME")
	gui.animate(node, "position.y", gui.get_position(node).y - 600, gui.EASING_INCIRC, 3)

	node = gui.get_node("HALL_OF_FAME")
	gui.animate(node, "position.y", gui.get_position(node).y - 500, gui.EASING_INCIRC, 3, .5)

	node = gui.get_node("INFO")
	gui.animate(node, "position.y", gui.get_position(node).y - 400, gui.EASING_INCIRC, 3, .5)

	node = gui.get_node("version_number")
	gui.animate(node, "position.y", gui.get_position(node).y - 40, gui.EASING_INCIRC, 2)

	node = gui.get_node("BG")
	gui.animate(node, "color", vmath.vector4(0, 0, 0, 0), gui.EASING_LINEAR, 8, 1)

	gui.stop_particlefx(gui.get_node("menu1"))
	gui.stop_particlefx(gui.get_node("menu2"))
	gui.stop_particlefx(gui.get_node("menu3"))
	gui.stop_particlefx(gui.get_node("menu_center"))

	gui.set_enabled(gui.get_node("crosshair"), false)
	timer.delay(8, false, function ()
		gui.set_enabled(gui.get_node("menu1"), false)
		gui.set_enabled(gui.get_node("menu2"), false)
		gui.set_enabled(gui.get_node("menu3"), false)
		gui.set_enabled(gui.get_node("menu_center"), false)
		msg.post("#", "disable")
	end)
end

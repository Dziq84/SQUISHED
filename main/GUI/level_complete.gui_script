
local allow_continue
local anim_next_node




function init(self)
	msg.post("#", "disable")
end




function on_message(self, message_id, message)
	local node, node2, pos, pos2, col, percentage, emoji_icon
	local nodes_to_tweak = {"killed", "killed_count", "escaped", "escaped_count", "bonus_text"}
	local menu_color = gui.get_color(gui.get_node("WIN"))

	if message_id == hash("show") then
		local text

		stat_levels = stat_levels + 1
		anim_next_node = false

		-- prepare GUI:
		allow_continue = false
		gui.set_color(gui.get_node("WIN"), vmath.vector4(1,1,1,0))
		gui.set_color(gui.get_node("BG"), vmath.vector4(0,0,0,0))
		gui.set_scale(gui.get_node("killed"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("escaped"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("killed_count"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("escaped_count"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("bonus_text"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("bonus_level_info"), vmath.vector3(0,0,1))
		gui.set_scale(gui.get_node("box1"), vmath.vector3(0,0,1))
		node = gui.get_node("complete_bonus_health") ; col = gui.get_color(node)
		gui.set_color(node, vmath.vector4(col.x, col.y, col.z ,0))
		node = gui.get_node("complete_bonus_points") ; col = gui.get_color(node)
		gui.set_color(node, vmath.vector4(col.x, col.y, col.z ,0))

		gui.animate(gui.get_node("WIN"), "color", menu_color, gui.EASING_LINEAR, .8)
		gui.animate(gui.get_node("BG"), "color", vmath.vector4(0,0,0,1), gui.EASING_LINEAR, 2)

		for a = 1, 4 do
			gui.set_color(gui.get_node("clover"..a), vmath.vector4(1,1,1,0))
		end

		-- put emoji icon based on how many escaped
		percentage = (escaped / (health - health_add)) * 100
		if percentage == 0 then
			emoji_icon = "e5"
			text = "excellent!"
		elseif percentage > 0 and percentage <= 25 then
			emoji_icon = "e41"
			text = "well done!"
		elseif percentage > 25 and percentage <= 50 then
			emoji_icon = "e9"
			text = "not so bad"
		elseif percentage > 50 and percentage <= 75 then
			emoji_icon = "e21"
			text = "try harder"
		else
			emoji_icon = "e44"
			text = "that hurts"
		end
		gui.play_flipbook(gui.get_node("emoji"), emoji_icon)
		gui.set_text(gui.get_node("complete_text"), text)


		if bonus_level_active then
			--tweak some nodes position if clover collected:
			for _, a in ipairs(nodes_to_tweak) do
				node = gui.get_node(a) ; pos = gui.get_position(node)
				gui.set_position(node, vmath.vector3(pos.x, pos.y + 18, 0))
			end
			gui.set_text(gui.get_node("next"), "LUCK TEST!")
		else
			gui.set_text(gui.get_node("next"), "NEXT LEVEL")
		end


		--> set updated text on nodes:
		node  = gui.get_node("killed_count") ;  pos  = gui.get_position(node)
		node2 = gui.get_node("escaped_count") ; pos2 = gui.get_position(node2)
		--
		if message.killed > 99 or message.escaped > 99 then
			gui.set_position(node,  vmath.vector3(36, pos.y, 0))
			gui.set_position(node2, vmath.vector3(76, pos2.y, 0))
			gui.set_pivot(node,  gui.PIVOT_W)
		end
		--
		gui.set_text(node,  message.killed)
		gui.set_text(node2, message.escaped)
		--<


		gui.animate(gui.get_node("killed"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1, 0, function()
			sound.play("game_layer1:/main#win_count")
			gui.animate(gui.get_node("killed_count"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1)
		end)

		-- if dark_mode then msg.post("/main#ctrl", "light_particle", {enabled = true, delay = 0.34}) end
		msg.post("/main#ctrl", "light_particle", {enabled = true, delay = 0.34})

		gui.animate(gui.get_node("escaped"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1, 1.2, function()
			sound.play("game_layer1:/main#win_count", {speed = .5})
			gui.animate(gui.get_node("escaped_count"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, 1, 0, function()
				if message.escaped == 0 then
					health = health + health_perfect
					sound.play("game_layer1:/main#perfect_win", {speed = .8})
					gui.set_text(gui.get_node("bonus_text"), "BONUS!   +"..health_perfect)
					gui.animate(gui.get_node("escaped_count"), "scale", vmath.vector3(1,1,1), gui.EASING_INOUTELASTIC, .6, 0, function()
						gui.animate(gui.get_node("escaped_count"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_INOUTELASTIC, .6)
					end)
					timer.delay(.8, false, function ()
						sound.play("game_layer1:/main#health_bonus", {speed = 1.4})
						gui.animate(gui.get_node("bonus_text"), "scale", vmath.vector3(.32, .32, 1), gui.EASING_OUTELASTIC, .6)
						gui.set_enabled(gui.get_node("box1"), true)
					end)
				end

				if bonus_level_active then
					timer.delay(1, false, function()
						sound.play("game_layer1:/main#health_bonus", {speed = 2})
						sound.play("game_layer1:/main#health_bonus", {speed = 2, delay = 0.26})
						gui.animate(gui.get_node("bonus_level_info"), "scale", vmath.vector3(.5, .5, 1), gui.EASING_OUTELASTIC, .6)
					end)

					for a = 1, 4 do
						gui.animate(gui.get_node("clover"..a), "color", vmath.vector4(1,1,1,1), gui.EASING_INSINE, 1, .6)
					end
				end

				msg.post(emoji_url, "clean_emojis", {continue = true})
				if #bomb_table > 0 then msg.post(bomb_url, "clean_bombs") end
				if #orb_table > 0 then msg.post(orb_url, "clean_orbs") end
				gui.animate(gui.get_node("box1"), "scale", vmath.vector3(1, 1, 1), gui.EASING_INSINE, 1.2, 0, function()
					allow_continue = true
				end)
			end)
		end)

		weapon_collide = false
		msg.post("#", "enable")


	elseif message_id == hash("hide") then
		if not bonus_level_active then
			node = gui.get_node("complete_bonus_health")
			gui.set_text(node, "+"..health_add)
			gui.animate(node, "color.w", 1, gui.EASING_INSINE, .1, 0, function()
				gui.animate(node, "color.w", 0, gui.EASING_INSINE, 3.2)
			end)
			pos = gui.get_position(node)
			pos.x = pos.x + math.random(220, 360) ; pos.y = pos.y + math.random(220, 360)
			gui.animate(node, "position", vmath.vector3(pos.x, pos.y, 1), gui.EASING_INSINE, 1.6)
			gui.animate(node, "scale", vmath.vector3(2.4, 2.4, 1), gui.EASING_INSINE, 1.5)

			node = gui.get_node("complete_bonus_points")
			gui.set_text(node, "+ "..((level - 1) * 10).." points")
			gui.animate(node, "color.w", 1, gui.EASING_INSINE, .1, 0, function()
				gui.animate(node, "color.w", 0, gui.EASING_INSINE, 2.6, 1)
			end)
			pos = gui.get_position(node)
			pos.x = pos.x - math.random(80, 100) ; pos.y = pos.y - math.random(220, 260)
			gui.animate(node, "position", vmath.vector3(pos.x, pos.y, 1), gui.EASING_INSINE, 2.4)
			gui.animate(node, "scale", vmath.vector3(2.4, 2.4, 1), gui.EASING_INSINE, 2.5)
		end

		gui.animate(gui.get_node("box1"), "color", vmath.vector4(1,1,1,0), gui.EASING_INSINE, 1)
		gui.animate(gui.get_node("box1"), "scale", vmath.vector3(0,0,0), gui.EASING_INSINE, 1)
		gui.animate(gui.get_node("WIN"), "color", vmath.vector4(1,1,1,0), gui.EASING_INSINE, 1.2)
		gui.animate(gui.get_node("BG"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.1)
		gui.animate(gui.get_node("overlay"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.1)

		for a = 1, 4 do
			gui.animate(gui.get_node("clover"..a), "color", vmath.vector4(1,1,1,0), gui.EASING_INSINE, 1)
		end

		timer.delay(.6, false, function() msg.post("/main#ctrl", "light_particle", {enabled = false}) end)

		post_clean_start = true
		gui.set_enabled(gui.get_node("crosshair"), false)
		if #blood_table > 0 then msg.post(blood_go_id, "clean_blood") end

		timer.delay(6, false, function()
			gui.reset_nodes() ; msg.post("#", "disable")
		end)
	end
end




function on_input(self, action_id, action)
	local pos

	if pause_id == nil then
		if action_id == nil then
			gui.set_position(gui.get_node("crosshair"), vmath.vector3(action.x, action.y, 1))
		end

		if allow_continue then
			if gui.pick_node(gui.get_node("box1"), action.x, action.y) then
				if not anim_next_node then
					anim_next_node = true
					gui.play_flipbook(gui.get_node("crosshair"), "cursor_hover")
					animate_node(gui.get_node("box1"), vmath.vector3(1,1,1), .06, "x")
					animate_node(gui.get_node("next"), vmath.vector3(.48, .5, 1), .08)
				end

				if action_id == hash("click1") and action.pressed then
					sound.play("main:/main#button_press")
					allow_continue = false
					msg.post("#", "hide")
				end
			else
				if anim_next_node then
					gui.play_flipbook(gui.get_node("crosshair"), "cursor")
					gui.animate(gui.get_node("box1"), "scale", vmath.vector3(1,1,1), go.EASING_INOUTSINE, 1)
					gui.animate(gui.get_node("next"), "scale", vmath.vector3(.48, .5, 1), go.EASING_INOUTSINE, 1)
					anim_next_node = false
				end
			end
		end
	end
end

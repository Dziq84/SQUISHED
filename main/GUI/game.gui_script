local allow_start_level
local skip_main_intro = false


-- other local variables:
local pos_level, pos_start, box1_timeout




function init()
	pos_level = gui.get_position(gui.get_node("level_intro"))
	pos_start = gui.get_position(gui.get_node("start_info"))
end




function on_message(self, message_id, message, sender)
	local node, col, a, i, delay, id, scale, shots, cursor_blinking


	if message_id == hash("show bullet_miss info") then
		delay = 0 ; weapon_collide = false

		for i = 1, 5 do
			node = gui.get_node("bullet_text"..i) ; a = gui.get_color(node)
			gui.set_color(node, vmath.vector4(a.x, a.y, a.z, 0))
			gui.animate(node, "color.w", 1, gui.EASING_LINEAR, 1.4, delay)
			if i == 4 then
				gui.set_text(node, tostring(message.amount))
				delay = delay + .08
			else
				delay = delay + .36
			end
		end
		timer.delay(2.6, false, function()
			delay = 1
			for i = 1, 5 do
				node = gui.get_node("bullet_text"..i)
				gui.animate(node, "color.w", 0, gui.EASING_LINEAR, 1.1, delay)
				delay = delay + .12
			end
		end)
		gui.set_enabled(gui.get_node("BULLET_MISS_INFO"), true)
		timer.delay(4, false, function()
			msg.post("#", "show_level_intro")
		end)




	elseif message_id == hash("show bombs info") then
		delay = 0 ; weapon_collide = false

		for i = 1, 5 do
			node = gui.get_node("bomb"..i) ; a = gui.get_color(node)
			gui.set_color(node, vmath.vector4(a.x, a.y, a.z, 0))
			gui.animate(node, "color.w", 1, gui.EASING_LINEAR, 1.4, delay)
			delay = delay + .74
			-- animate bombs
			if i == 1 or i == 5 then
				gui.animate(node, "scale", vmath.vector3(1.4, 1.4, 1), go.EASING_LINEAR, .8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
			end
		end
		timer.delay(4.24, false, function()
			delay = 1
			for i = 5, 1, -1 do
				node = gui.get_node("bomb"..i)
				gui.animate(node, "color.w", 0, gui.EASING_LINEAR, 1.25, delay)
				delay = delay + .22
			end
		end)
		gui.set_enabled(gui.get_node("BOMBS_AVAILABLE"), true)
		timer.delay(5.82, false, function()
			msg.post("#", "show_level_intro")
		end)




	elseif message_id == hash("show_bonus_available_info") then
		delay = 0 ; weapon_collide = false

		for i = 1, 4 do
			node = gui.get_node("tt"..i) ; a = gui.get_color(node)
			gui.set_color(node, vmath.vector4(a.x, a.y, a.z, 0))
			gui.animate(node, "color.w", 1, gui.EASING_LINEAR, 1.4, delay)
			delay = delay + .36
		end
		timer.delay(2.5, false, function()
			delay = 1
			for i = 1, 4 do
				node = gui.get_node("tt"..i)
				gui.animate(node, "color.w", 0, gui.EASING_LINEAR, 1.25, delay)
				delay = delay + .1
			end
		end)
		gui.set_enabled(gui.get_node("BONUS_AVAILABLE"), true)
		timer.delay(3.8, false, function()
			msg.post("#", "show_level_intro")
		end)




	elseif message_id == hash("show_bonus_level_intro") then
		delay = 0 ; weapon_collide = false

		darkness_level_temp = darkness_level
		fade_darkness(6, 0)

		gui.set_enabled(gui.get_node("crosshair"), true)
		gui.set_position(gui.get_node("start_info"), vmath.vector3(window_w / 2 , -100, 1))
		gui.set_enabled(gui.get_node("display_bonus_level"), true)
		gui.set_color(gui.get_node("display_bonus_level"), vmath.vector4(0,0,0,0))
		gui.set_position(gui.get_node("bonus_level"), vmath.vector3(640, 690, 0))
		gui.set_text(gui.get_node("score1"), "BONUS SCORE: 0")

		for i = 1, 7 do
			node = gui.get_node("text"..i) ; a = gui.get_color(node)
			gui.set_color(node, vmath.vector4(a.x, a.y, a.z, 0))
			gui.animate(node, "color.w", 1, gui.EASING_LINEAR, 1.4, delay)
			delay = delay + .88
		end

		gui.set_enabled(gui.get_node("bonus_level"), true)
		skip_main_intro = false
		msg.post("#", "show_level_intro")




	elseif message_id == hash("show_level_intro") then

		if skip_main_intro == false then
			allow_start_level = false
			msg.post("#", "disable")
			msg.post("#", "acquire_input_focus")

			gui.set_color(gui.get_node("display"), vmath.vector4(0,0,0,0))
			gui.set_color(gui.get_node("BG"), vmath.vector4(0,0,0,0))
			gui.animate(gui.get_node("BG"), "color", vmath.vector4(.22, .26, .32, .52), gui.EASING_LINEAR, 1.2)
			gui.set_enabled(gui.get_node("BULLET_MISS_INFO"), false)
			gui.set_enabled(gui.get_node("BOMBS_AVAILABLE"), false)
			gui.set_enabled(gui.get_node("BONUS_AVAILABLE"), false)
			gui.set_enabled(gui.get_node("cursor_counter"), false)


			if not bonus_level_active then
				darkness_level = 0
				msg.post("main:/main#ctrl", "set dark render")
				gui.set_enabled(gui.get_node("display_bonus_level"), false)
				gui.set_enabled(gui.get_node("bonus_level"), false)
				gui.set_position(gui.get_node("level_intro"), vmath.vector3(-400, window_h / 2, 1))
				gui.animate(gui.get_node("level_intro"), "position.x", pos_level.x, gui.EASING_OUTCIRC, 1)
			else
				bonus_level_active = 1
				msg.post("game_layer1:/main#ctrl", "generate_emojis", {emojis = 90, scale = 1})
				timer.delay(0.04, false, function()
					msg.post("game_layer1:/main#ctrl", "generate_emojis", {emojis = 10, scale = 2, table_clear = false})
				end)

				msg.post("game_layer1:/main#ctrl", "fade_out_music", {time = 2, mode = "", disable = false})
				msg.post("game_layer1:/main#ctrl", "fade_in_add_music")
			end

			gui.set_position(gui.get_node("start_info"), vmath.vector3(window_w / 2 , -100, 1))
			gui.animate(gui.get_node("start_info"), "position.y", pos_start.y, gui.EASING_OUTCIRC, .6, 1, function()
				allow_start_level = true
			end)


			-- next iterations (for each new level)
		else
			timer.delay(.4, false, function()
				msg.post("#", "show_level_display")
				msg.post("#", "hide_level_start")
			end)
		end

		gui.set_scale(gui.get_node("GO"), vmath.vector3(1.4, 1.4, 1.4))
		gui.set_color(gui.get_node("GO_text"), vmath.vector4(0,0,0,0))
		msg.post("#", "enable")




	elseif message_id == hash("hide_level_start") then
		gui.set_enabled(gui.get_node("crosshair"), true)
		gui.animate(gui.get_node("level_intro"), "scale", 0.01, gui.EASING_INCIRC, .9)
		gui.animate(gui.get_node("ready"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, .8, 0, function ()
			gui.animate(gui.get_node("GO"), "scale", 20, gui.EASING_INCIRC, .9)
			gui.set_color(gui.get_node("GO_text"), vmath.vector4(.25 , .32 , .82, .65))
			gui.animate(gui.get_node("GO_text"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, .8, .2)
		end)

		gui.animate(gui.get_node("start_info"), "position.y", pos_start.y - 200, gui.EASING_INCIRC, .25)

		if skip_main_intro == false and not bonus_level_active then
			skip_main_intro = true ; BG_active = true ; BG_table = {}
			for a = 1, 8 do
				id = factory.create("/main#BG_factory")
				table.insert(BG_table, id)
				BG_url = msg.url(nil, id, nil)
			end
		end

		if bonus_level_active then
			gui.animate(gui.get_node("BG"), "color.w", 0, gui.EASING_LINEAR, 4)
			gui.animate(gui.get_node("bonus_level"), "position.y", 2222, gui.EASING_INSINE, 1.1, 0, function()
				gui.set_enabled(gui.get_node("bonus_level"), false)
			end)
		else
			gui.animate(gui.get_node("BG"), "color.w", 0, gui.EASING_LINEAR, 64)
		end

		timer.delay(1.6, false, function()
			weapon_collide = true
			msg.post("/main#ctrl", "level_start")
		end)




	elseif message_id == hash("show_level_display") then
		cursor_blinking = false

		if level >= level_bonus_unlocked then
			node = gui.get_node("cursor_counter") ; col = gui.get_color(node)
			gui.set_color(node, vmath.vector4(col.x, col.y, col.z, 0))
			gui.set_enabled(gui.get_node("cursor_counter"), true)
			
			node = gui.get_node("clover_icon") ; col = gui.get_color(node)
			gui.set_color(node, vmath.vector4(col.x, col.y, col.z, 0))
			gui.set_enabled(node, true)

			node = gui.get_node("clock_icon") ; col = gui.get_color(node)
			gui.set_color(node, vmath.vector4(col.x, col.y, col.z, 0))
			gui.set_enabled(node, true)

			node = gui.get_node("bonus_item_requirement") ; col = gui.get_color(node)
			gui.set_color(node, vmath.vector4(col.x, col.y, col.z, 0))
			gui.set_enabled(node, true)
		else
			gui.set_enabled(gui.get_node("clover_icon"), false)
			gui.set_enabled(gui.get_node("clock_icon"), false)
			gui.set_enabled(gui.get_node("bonus_item_requirement"), false)
		end

		gui.set_color(gui.get_node("crosshair"), vmath.vector4(.8, .8, .8, .6))
		gui.set_text(gui.get_node("level"), "LEVEL "..level)
		gui.set_text(gui.get_node("health"), tostring(health))
		gui.set_text(gui.get_node("emojis_left"), tostring(emojis))
		gui.set_text(gui.get_node("bonus_item_requirement"), tostring(bonus_requirement + 1))
		gui.set_text(gui.get_node("score"), "SCORE: "..score)

		if level >= level_bombs_unlocked then
			gui.set_enabled(gui.get_node("bomb_amount"), true)
			gui.animate(gui.get_node("bomb_display"), "scale", vmath.vector3(2.25, 2.25, 1), go.EASING_LINEAR, .8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		else
			gui.set_enabled(gui.get_node("bomb_amount"), false)
			gui.set_text(gui.get_node("bomb_amount"), tostring(bombs_left))
		end
		msg.post("main:/main#ctrl", "set dark render")

		gui.animate(gui.get_node("display"), "color", vmath.vector4(1,1,1,1), gui.EASING_LINEAR, 2.8, 1.65)




	elseif message_id == hash("show_bonus_level_display") then
		gui.set_color(gui.get_node("crosshair"), vmath.vector4(.8, .8, .8, .6))
		gui.set_text(gui.get_node("bullets"), "20")
		gui.animate(gui.get_node("display_bonus_level"), "color", vmath.vector4(1,1,1,1), gui.EASING_LINEAR, 1.8, 1.2)




	elseif message_id == hash("display_update") then
		local counter, counter_text, node1, node2, pos1, pos2

		if level_play or message.stat == "force" then
			msg.post(cursor_light_id, "update cursor light")
			msg.post("game_layer1:/main#ctrl", "update_music")

			--> reposition emoji counter a bit if emojis > 99
			node1 = gui.get_node("emoji_icon") ; pos1 = gui.get_position(node1)
			node2 = gui.get_node("heart_icon") ; pos2 = gui.get_position(node2)
			--
			if emojis_left < 100 then
				gui.set_position(node1, vmath.vector3(590, pos1.y, 0))
				gui.set_position(node2, vmath.vector3(456, pos2.y, 0))
			else
				gui.set_position(node1, vmath.vector3(572, pos1.y, 0))
				gui.set_position(node2, vmath.vector3(438, pos2.y, 0))
			end
			--<

			gui.set_text(gui.get_node("health"), tostring(health))
			gui.set_text(gui.get_node("emojis_left"), tostring(emojis_left))
			gui.set_text(gui.get_node("bomb_amount"), tostring(bombs_left))
			msg.post("main:/main#ctrl", "set dark render")

			if message.stat ~= "" and message.stat ~= "force" then
				if message.stat == "health loss" then
					gui.animate(gui.get_node("display"), "color", vmath.vector3(1, .4, .1), gui.EASING_LINEAR, .14, 0, function()
						gui.animate(gui.get_node("display"), "color", vmath.vector3(.78 , .86, .94), gui.EASING_LINEAR, .14)
					end)
				end

				if message.stat == "orb collect" then
					gui.animate(gui.get_node("display"), "color", vmath.vector3(2, 2, 2), gui.EASING_LINEAR, .16, 0, function()
						gui.animate(gui.get_node("display"), "color", vmath.vector3(.78 , .86, .94), gui.EASING_LINEAR, .16)
					end)
				end
			else
				gui.set_text(gui.get_node("score"), "SCORE: "..score)
			end

			if level >= level_bonus_unlocked then
				counter = emojis_left - bonus_requirement
				if counter > 0 then counter_text = tostring(counter) else counter_text = "" end
				if counter == 0 and not cursor_blinking then
					cursor_blinking = true
					gui.animate(gui.get_node("crosshair"), "color", vmath.vector4(1, .54, .08, 1), go.EASING_LINEAR, .32, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
				elseif counter < 0 and level_play then
					cursor_blinking = false
					gui.cancel_animation(gui.get_node("crosshair"), "color")
				end
				gui.set_text(gui.get_node("cursor_counter"), counter_text)
				gui.set_text(gui.get_node("bonus_item_requirement"), tostring(bonus_requirement))

				if not bonus_can_spawn then
					gui.set_color(gui.get_node("crosshair"), vmath.vector4(.4, 1, .4, .6))
					gui.animate(gui.get_node("cursor_counter"), "color.w", 1, go.EASING_INSINE, 1, .2)
					gui.animate(gui.get_node("clover_icon"), "color.w", 1, go.EASING_INSINE, 1, .76)
					gui.animate(gui.get_node("clock_icon"), "color.w", 1, go.EASING_INSINE, 1, .76)
					gui.animate(gui.get_node("bonus_item_requirement"), "color.w", 1, go.EASING_INSINE, 1, .76)

				elseif message.mode == "remove_bonus_info" then
					gui.set_color(gui.get_node("crosshair"), vmath.vector4(.8, .8, .8, .6))
					gui.animate(gui.get_node("cursor_counter"), "color.w", 0, go.EASING_INSINE, 1, .28)
					gui.animate(gui.get_node("clover_icon"), "color.w", 0, go.EASING_INSINE, 1)
					gui.animate(gui.get_node("clock_icon"), "color.w", 0, go.EASING_INSINE, 1)
					gui.animate(gui.get_node("bonus_item_requirement"), "color.w", 0, go.EASING_INSINE, 1)
				end
			end
		end




	elseif message_id == hash("fade crosshair") then
		gui.set_color(gui.get_node("crosshair"), vmath.vector4(1, .2, .2, .6))
		gui.cancel_animation(gui.get_node("crosshair"), "color")
		gui.animate(gui.get_node("crosshair"), "color.w", 0, go.EASING_LINEAR, 1.4, 1)




	elseif message_id == hash("bonus_display_update") then
		gui.set_text(gui.get_node("score1"), "BONUS SCORE: "..bonus_score)
		if bonus_shots < 0 then shots = 0 else shots = bonus_shots end
		gui.set_text(gui.get_node("bullets"), tostring(shots))
		gui.set_text(gui.get_node("emojis1"), tostring(bonus_level_kills.small + bonus_level_kills.big))




	elseif message_id == hash("hide_after_level") then
		total_kills = total_kills + killed
		skip_main_intro = true
		gui.set_enabled(gui.get_node("crosshair"), false)
		gui.cancel_animation(gui.get_node("crosshair"), "color")
		gui.animate(gui.get_node("display"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.6, .2)
		gui.animate(gui.get_node("display_bonus_level"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.6, .2)




	elseif message_id == hash("animate cursor") then
		if weapon_collide then scale = vmath.vector3(4,4,0) else scale = vmath.vector3(1.64, 1.64, 0) end
		if level_play then gui.animate(gui.get_node("crosshair"), "color.w", .2, gui.EASING_LINEAR, .15) end
		gui.animate(gui.get_node("crosshair"), "scale", scale, gui.EASING_LINEAR, .15, 0, function ()
			if level_play then gui.animate(gui.get_node("crosshair"), "color.w", .64, gui.EASING_LINEAR, .1) end
			gui.animate(gui.get_node("crosshair"), "scale", vmath.vector3(3,3,3), gui.EASING_LINEAR, .1)
		end)
	end
end




function on_input(self, action_id, action)
	if action.y > 1320 - 46 then
		cursor_y = 1320 - 46 ; action.y = cursor_y
	end

	if pause_id == nil then
		if action_id == nil then
			gui.set_position(gui.get_node("crosshair"), vmath.vector3(action.x, action.y, 1))
			cursor_x = action.x ; cursor_y = action.y
		end


		if action_id == hash("space") and allow_start_level == true then
			allow_start_level = false
			msg.post("#", "hide_level_start")
			if not bonus_level_active then
				msg.post(cursor_light_id, "update cursor light", {stat = "set", val = 0})
				msg.post("game_layer1:/main#ctrl", "fade_in_music", {time = 2, delay = 0, start_new = true})
				msg.post("#", "show_level_display")
			else
				msg.post("#", "show_bonus_level_display")
			end
		end
	end
end

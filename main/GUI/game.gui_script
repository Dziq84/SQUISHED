local allow_start_level
local skip_main_intro = false


-- other local variables:
local pos_level, pos_start, box1_timeout




function on_message(self, message_id, message, sender)
	local a
	pos_level = gui.get_position(gui.get_node("level_intro"))
	pos_start = gui.get_position(gui.get_node("start_info"))


	if message_id == hash("show_level_intro") then
		if skip_main_intro == false then
			allow_start_level = false
			msg.post("#", "disable")
			msg.post("#", "acquire_input_focus")

			gui.set_color(gui.get_node("display"), vmath.vector4(0,0,0,0))
			gui.set_color(gui.get_node("BG"), vmath.vector4(0,0,0,0))
			gui.animate(gui.get_node("BG"), "color", vmath.vector4(.16, .22, .28, .4), gui.EASING_LINEAR, 1.5)

			gui.set_position(gui.get_node("level_intro"), vmath.vector3(-400, window_h / 2, 1))
			gui.animate(gui.get_node("level_intro"), "position.x", pos_level.x, gui.EASING_OUTCIRC, 1)

			gui.set_position(gui.get_node("start_info"), vmath.vector3(window_w /2 , -100, 1))
			gui.animate(gui.get_node("start_info"), "position.y", pos_start.y, gui.EASING_OUTCIRC, .6, 1, function ()
				allow_start_level = true
				sound.play("/main#level_loop", {gain = 0.6})
			end)

		-- next iterations (for each new level)
		else
			msg.post(".", "hide_level_start")
			msg.post(".", "show_level_display")
			gui.set_scale(gui.get_node("GO"), vmath.vector3(1.4, 1.4, 1.4))
		end

		gui.set_color(gui.get_node("GO_text"), vmath.vector4(0,0,0,0))
		msg.post("#", "enable")


	elseif message_id == hash("hide_level_start") then
		gui.animate(gui.get_node("level_intro"), "scale", 0.01, gui.EASING_INCIRC, .9)
		gui.animate(gui.get_node("ready"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, .8, 0, function ()
			gui.animate(gui.get_node("GO"), "scale", 20, gui.EASING_INCIRC, .9)
			gui.set_color(gui.get_node("GO_text"), vmath.vector4(.25 , .32 , .82, .65))
			gui.animate(gui.get_node("GO_text"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, .8, .2)
		end)

		gui.animate(gui.get_node("BG"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 2.5)
		gui.animate(gui.get_node("start_info"), "position.y", pos_start.y - 200, gui.EASING_INCIRC, .25)

		-- show dynamic BG
		if skip_main_intro == false then
			skip_main_intro = true
			BG_active = true

			for a = 1, 8 do
				factory.create("/main#BG_factory")
			end
		end

		timer.delay(2, false, function () msg.post("/main#ctrl", "level_start") end)


	elseif message_id == hash("show_level_display") then
		gui.set_enabled(gui.get_node("crosshair"), true)
		gui.set_text(gui.get_node("level"), "LEVEL "..level)
		gui.set_text(gui.get_node("health"), tostring(health))
		gui.set_text(gui.get_node("emojis"), tostring(emojis))
		gui.set_text(gui.get_node("score"), "SCORE: "..score)
		gui.animate(gui.get_node("display"), "color", vmath.vector4(1,1,1,1), gui.EASING_LINEAR, 2.8, 1.65)


	elseif message_id == hash("display_update") then
		gui.set_text(gui.get_node("score"), "SCORE: "..score)
		gui.set_text(gui.get_node("health"), tostring(health))
		gui.set_text(gui.get_node("emojis"), tostring(emojis_left))
		if message.stat == "emoji_left" then
			gui.animate(gui.get_node("display"), "color", vmath.vector3(1, .4, .1), gui.EASING_LINEAR, .14, 0, function ()
				gui.animate(gui.get_node("display"), "color", vmath.vector3(.78 , .86, .94), gui.EASING_LINEAR, .14)
			end)
		end


	elseif message_id == hash("hide") then
		total_kills = total_kills + killed
		gui.set_enabled(gui.get_node("crosshair"), false)
		gui.animate(gui.get_node("display"), "color", vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1.6, .2)
	end
end




function on_input(self, action_id, action)
	local pos
	if action.y > 1320 - 46 then action.y = 1320 - 46 end
	
	if pause_id == nil then
		if action_id == nil then
			gui.set_position(gui.get_node("crosshair"), vmath.vector3(action.x, action.y, 1))
		end


		if action_id == hash("space") and allow_start_level == true then
			allow_start_level = false
			msg.post(".", "hide_level_start")
			msg.post(".", "show_level_display")
		end
	end
end

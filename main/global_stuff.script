
function get_offscreen_pos(offset, oposite_method, pos, spread)
	local a, x, y, method
	if spread == nil then spread = 0 end

	if oposite_method == 1 then
		method = math.random(1, 2)

		if method == 1 then -- to left or right
			if pos.x <= window_w / 2 then
				x = window_w + offset + 50
			else
				x = -offset
			end
			y = math.random(60, window_h - 44 - 60)
		else  -- to up or down
			if pos.y <= window_h / 2 then
				y = window_h + offset - 44
			else
				y = -offset - 50
			end
			x = math.random(60, window_w - 60)
		end

	elseif oposite_method == 2 then
		x = window_w - pos.x
		y = window_h - pos.y

	else
		a = rnd.range(1,4)

		if a == 1 then     -- left
			x = -offset + math.random(-spread, spread)
			y = math.random(-offset, window_h + offset)
		elseif a == 2 then -- right
			x = window_w + offset + math.random(-spread, spread)
			y = math.random(-offset, window_h + offset)
		elseif a == 3 then -- down
			x = math.random(-offset, window_w + offset)
			y = -offset + math.random(-spread, spread)
		elseif a == 4 then -- up
			x = math.random(-offset, window_w + offset)
			y = window_h + offset + math.random(-spread, spread)
		end
	end

	return x, y
end




function get_onscreen_pos(offset, multiplier)
	local x, y
	if multiplier == nil then multiplier = 1 end
	
	x = rnd.range(offset + 25, window_w - offset - (25 * multiplier))
	y = rnd.range(offset + 25, window_h - offset - (25 * multiplier) - 30)

	return x, y
end




function generate_emojis(num, url, scale, clear)
	local x, y, a, id, multiplier

	if clear == nil or clear then emoji_table = {} end

	for a = 1, num do
		if not bonus_level_active then
			x, y = get_offscreen_pos(200, false, nil, 100)
		else
			if scale == 1 then multiplier = 1 else multiplier = 2 end
			x, y = get_onscreen_pos(10, multiplier)
		end
		id = factory.create(url, vmath.vector3(x, y, 1), nil, nil, scale)
		table.insert(emoji_table, id)
	end
	emoji_url = msg.url(nil, id, nil)
end




function generate_bombs(amount, scale)
	local id

	for a = 1, amount do
		id = factory.create("/bomb#bomb_factory", vmath.vector3(-100, -100, 1), nil, nil, scale)
		table.insert(bomb_table, id)
	end
	bomb_url = msg.url(nil, id, nil)
end




function generate_orbs(amount, scale)
	local id

	for a = 1, amount do
		id = factory.create("/bonus#orb_factory", nil, nil, nil, scale)
		table.insert(orb_table, id)
	end
	orb_url = msg.url(nil, id, nil)
end




-- 0: generate on_screen position
-- 1: generate near position using original pos (5th argument must be set)
function check_bomb_proximity(self, type, offset, distance, pos)
	local collide, id, x, y, bomb_pos
	self.pos_check = false


	while self.pos_check == false do

		if type == 0 then
			x, y = get_onscreen_pos(offset, 1)
		else  -- for orbs movement, so they can't fly near bombs
			x = pos.x + math.random(-offset, offset)
			y = pos.y + math.random(-offset, offset)
		end

		for _, id in ipairs(bomb_table) do
			bomb_pos = go.get_position(id)

			if x < bomb_pos.x + distance and x > bomb_pos.x - distance and y < bomb_pos.y + distance and y > bomb_pos.y - distance then
				collide = true
				break
			else
				collide = false
			end
		end

		self.pos_check = not collide and true or false
	end

	return {x = x, y = y}
end




function slider(container, pointer, left, right, action)
	local pos_center, pos_pointer, pos

	pos = vmath.vector3(action.x, action.y , 0)
	pos_pointer = gui.get_position(gui.get_node(pointer))
	pos_center = gui.get_position(gui.get_node(container))

	if pos.x - pos_center.x < left then 
		pos.x = left
	elseif pos.x - pos_center.x > right then 
		pos.x = right
	else
		pos.x = action.x - pos_center.x
	end

	gui.set_position(gui.get_node(pointer), vmath.vector3(pos.x, pos_pointer.y, 0))
	return (pos.x / (right * 2)) + .5
end




function animate_node(node, scale, range, param)
	local pos, prop = gui.get_position(node)
	prop = not param and "scale" or "scale."..param

	gui.animate(node, prop, scale * (1 + range), go.EASING_INOUTSINE, .6, 0, function()
		gui.animate(node, prop, scale * (1 - range), go.EASING_INOUTSINE, .6, 0, function()
			animate_node(node, scale, range, param)
		end)
	end)

end




function fade_darkness(time, target)
	local dark_fade_timer
	local is_break = false
	dark_fade_delay = 1 / (time * 1000) * 16

	dark_fade_timer = timer.delay(dark_fade_delay, true, function()
		if target > darkness_level then
			darkness_level = darkness_level + dark_fade_delay
			if darkness_level > target then darkness_level = target ; is_break = true end
		elseif target < darkness_level then
			darkness_level = darkness_level - dark_fade_delay
			if darkness_level < target then darkness_level = target ; is_break = true end
		else
			is_break = true
		end

		msg.post("main:/main#ctrl", "set dark render")

		if is_break then
			timer.cancel(dark_fade_timer)
		end
	end)
end




function change_darkness(amount)
	local val = darkness_level
	val = val + (amount / 1000)
	if val < 0 then val = 0 end
	if val > 1 then val = 1 end
	darkness_level = val
end



function pause(proxy)
	if menu_options_visible == false then
		if defos.is_cursor_clipped() then
			pause_id = proxy
			sound.play("main:/pause#pause_sfx", {speed = 0.5})
			defos.set_cursor_clipped(false)
			defos.set_cursor_visible(true)
			msg.post(proxy, "set_time_step", {factor = 0 , mode = 0})
			msg.post("main:/pause#pause", "show")
		else
			sound.play("main:/pause#pause_sfx")
			defos.set_cursor_clipped(true)
			defos.set_cursor_visible(false)
			if proxy_speed == 1 then
				msg.post(proxy, "set_time_step", {factor = 1 , mode = 0})
			else
				msg.post(proxy, "set_time_step", {factor = proxy_speed , mode = 0})
			end
			msg.post("main:/pause#pause", "hide")
			pause_id = nil
		end
	else
		msg.post("main:/options#options", "hide")
	end
end




function load_config()
	local file = sys.get_save_file("Emoji_Madness", "config.dzq")
	local data = sys.load(file)

	if data.sound_vol == nil then sound_vol = 1 else
		sound_vol = data.sound_vol
	end
	if data.music_vol == nil then music_vol = .5 else
		music_vol = data.music_vol
	end
	sound.set_group_gain("sound", sound_vol)
	sound.set_group_gain("music", music_vol)
end




local function set_default_records()
	local table = {}

	--         name:               points:  level:  kills:
	table[1] = {"dziq",            6048,    20,     688}
	table[2] = {"natzab",          1443,    16,     467}
	table[3] = {"moron_quin",      64,      4,      22}
	table[4] = {"suckergoth",      2,       1,      2}
	table[5] = {"fuckINQ009",      1,       1,      1}

	return table
end

hall_format = 1

function load_records()
	local file = sys.get_save_file("Emoji_Madness", "hall_of_fame.dzq")
	local data = sys.load(file)

	if data.records == nil or data.format ~= hall_format then
		return set_default_records()
	else
		return data.records
	end
end




-- game        -  total games started
-- kill        -  total kills
-- combo       -  total number of charged kills
-- chain       -  biggest chained combo amount
-- chain_score -  biggest score in single chain
-- health      -  total number of health loss
-- level       -  total levels completed
-- bonus_level -  total bonus level completed
-- bullet      -  total bullets shots
-- hit         -  total succesfull hits
-- bomb        -  total bombs detonated
-- score       -  total score collected

-- stats_define:
stats_table = {game = 0, kill = 0, combo = 0, chain = 0, chain_score = 0, health = 0, level = 0, bonus_level = 0, bullet = 0, hit = 0, bomb = 0, score = 0}

function load_stats()
	local file = sys.get_save_file("Emoji_Madness", "stats.dzq")
	local data = sys.load(file)

	if data ~= nil then
		for key , val in pairs(data) do
			stats_table[key] = val
		end
	end
end


function stat_change(key, val)
	stats_table[key] = stats_table[key] + val
end


function save_stats()
	local file = sys.get_save_file("Emoji_Madness", "stats.dzq")
	sys.save(file, stats_table)
end


stat_games         = 0
stat_levels        = 0
stat_bonus_level   = 0
stat_kills         = 0
stat_combo         = 0
stat_chain_record  = 0
stat_chain_score   = 0
stat_health_loss   = 0
stat_bombs         = 0
stat_bullets_all   = 0
stat_bullets_hit   = 0
stat_score         = 0

function stats_write()
	stat_change("game",         stat_games)
	stat_change("level",        stat_levels)
	stat_change("bonus_level",  stat_bonus_level)
	stat_change("kill",         stat_kills)
	stat_change("combo",        stat_combo)
	if stat_chain_record > stats_table.chain and stat_chain_record >= 2 then
		stat_change("chain",        stat_chain_record)
	end
	if stat_chain_score > stats_table.chain_score then
		stat_change("chain_score",  stat_chain_score)
	end
	stat_change("health",       stat_health_loss)
	stat_change("bomb",         stat_bombs)
	stat_change("bullet",       stat_bullets_all)
	stat_change("hit",          stat_bullets_hit)
	stat_change("score",        stat_score)
	save_stats()

	pprint(stats_table)
	pprint(string.format("accurancy: %d%%", (stats_table.hit / stats_table.bullet) * 100))
end


function final()
	stats_write()
end

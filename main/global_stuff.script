
function get_offscreen_pos(offset, oposite, pos, spread)
	local a, x, y, method
	if spread == nil then spread = 0 end

	if oposite == true then
		method = math.random(1, 2)

		if method == 1 then -- to left or right
			if pos.x <= window_w / 2 then
				x = window_w + offset
			else
				x = -offset
			end
			y = math.random(0, window_h)
		else  -- to up or down
			if pos.y <= window_h / 2 then
				y = window_h + offset - 44  --compensate for display_bar
			else
				y = -offset
			end
			x = math.random(0, window_w)
		end
	else
		a = rnd.range(1,4)

		if a == 1 then     -- left
			x = -offset + math.random(-spread, spread)
			y = math.random(-offset, window_h + offset)
		elseif a == 2 then -- right
			x = window_w + offset + math.random(-spread, spread)
			y = math.random(-offset, window_h + offset)
		elseif a == 3 then -- down
			x = math.random(-offset, window_w + offset)
			y = -offset + math.random(-spread, spread)
		elseif a == 4 then -- up
			x = math.random(-offset, window_w + offset)
			y = window_h + offset + math.random(-spread, spread)
		end
	end

	return x, y
end




function get_onscreen_pos(offset, multiplier)
	local x, y
	if multiplier == nil then multiplier = 1 end
	
	x = rnd.range(offset + 25, window_w - offset - (25 * multiplier))
	y = rnd.range(offset + 25, window_h - offset - (25 * multiplier) - 30)

	return x, y
end




function generate_emojis(num, url, scale, clear)
	local x, y, a, id, multiplier

	if clear == nil or clear then emoji_table = {} end

	for a = 1, num do
		if not bonus_level_active then
			x, y = get_offscreen_pos(200, false, nil, 100)
		else
			if scale == 1 then multiplier = 1 else multiplier = 2 end
			x, y = get_onscreen_pos(10, multiplier)
		end
		id = factory.create(url, vmath.vector3(x, y, 1), nil, nil, scale)
		table.insert(emoji_table, id)
	end
	emoji_url = msg.url(nil, id, nil)
end




function generate_bombs(amount, scale)
	local x, y, id

	for a = 1, amount do
		x, y = get_onscreen_pos(80, 1)
		id = factory.create("/bomb#bomb_factory", vmath.vector3(x, y, 1), nil, nil, scale)
		table.insert(bomb_table, id)
	end
	bomb_url = msg.url(nil, id, nil)
end




function generate_orbs(amount, scale)
	local x, y, id

	for a = 1, amount do
		x, y = get_onscreen_pos(60, 1)
		id = factory.create("/bonus#orb_factory", vmath.vector3(x, y, .98), nil, nil, scale)
		table.insert(orb_table, id)
	end
	orb_url = msg.url(nil, id, nil)
end




function slider(container, pointer, left, right, action)
	local pos_center, pos_pointer, pos

	pos = vmath.vector3(action.x, action.y , 0)
	pos_pointer = gui.get_position(gui.get_node(pointer))
	pos_center = gui.get_position(gui.get_node(container))

	if pos.x - pos_center.x < left then 
		pos.x = left
	elseif pos.x - pos_center.x > right then 
		pos.x = right
	else
		pos.x = action.x - pos_center.x
	end

	gui.set_position(gui.get_node(pointer), vmath.vector3(pos.x, pos_pointer.y, 0))
	return (pos.x / (right * 2)) + .5
end




function animate_node(node, scale, range, param)
	local pos, prop = gui.get_position(node)
	prop = not param and "scale" or "scale."..param

	gui.animate(node, prop, scale * (1 + range), go.EASING_INOUTSINE, .6, 0, function()
		gui.animate(node, prop, scale * (1 - range), go.EASING_INOUTSINE, .6, 0, function()
			animate_node(node, scale, range, param)
		end)
	end)

end




function fade_darkness(time, target)
	local dark_fade_timer
	local is_break = false
	dark_fade_delay = 1 / (time * 1000) * 16

	dark_fade_timer = timer.delay(dark_fade_delay, true, function()
		if target > darkness_level then
			darkness_level = darkness_level + dark_fade_delay
			if darkness_level > target then darkness_level = target ; is_break = true end
		elseif target < darkness_level then
			darkness_level = darkness_level - dark_fade_delay
			if darkness_level < target then darkness_level = target ; is_break = true end
		else
			is_break = true
		end

		msg.post("main:/main#ctrl", "set dark render")

		if is_break then
			timer.cancel(dark_fade_timer)
		end
	end)
end




function change_darkness(amount)
	local val = darkness_level
	val = val + (amount / 1000)
	if val < 0 then val = 0 end
	if val > 1 then val = 1 end
	darkness_level = val
end



function pause(proxy)
	if menu_options_visible == false then
		if defos.is_cursor_clipped() then
			pause_id = proxy
			sound.play("main:/pause#pause_sfx", {speed = 0.5})
			defos.set_cursor_clipped(false)
			defos.set_cursor_visible(true)
			msg.post(proxy, "set_time_step", {factor = 0 , mode = 0})
			msg.post("main:/pause#pause", "show")
		else
			sound.play("main:/pause#pause_sfx")
			defos.set_cursor_clipped(true)
			defos.set_cursor_visible(false)
			if proxy_speed == 1 then
				msg.post(proxy, "set_time_step", {factor = 1 , mode = 0})
			else
				msg.post(proxy, "set_time_step", {factor = proxy_speed , mode = 0})
			end
			msg.post("main:/pause#pause", "hide")
			pause_id = nil
		end
	else
		msg.post("main:/options#options", "hide")
	end
end




function load_config()
	local file = sys.get_save_file("SQUISHED", "config.dzq")
	local data = sys.load(file)

	if data.sound_vol == nil then sound_vol = 1 else
		sound_vol = data.sound_vol
		sound.set_group_gain("sound", data.sound_vol)
	end
	if data.music_vol == nil then music_vol = .5 else
		music_vol = data.music_vol
		sound.set_group_gain("music", data.music_vol)
	end
end




local function set_default_records()
	local table = {}

	--         name:               points:  level:  kills:
	table[1] = {"dziq",            1443,    16,     467}
	table[2] = {"nat zab",         409,     12,     215}
	table[3] = {"moron_quin",      60,      3,      22}
	table[4] = {"suckergoth",      2,       1,      2}
	table[5] = {"fuckINQ009",      1,       1,      1}
	
	return table
end

hall_format = 2

function load_records()
	local file = sys.get_save_file("SQUISHED", "hall_of_fame.dzq")
	local data = sys.load(file)

	if data.records == nil or data.format ~= hall_format then
		return set_default_records()
	else
		return data.records
	end
end

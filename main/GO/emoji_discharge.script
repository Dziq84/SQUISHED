
local discharge_table = {}




function init(self)
	self.charged_combo_count, self.charged_combo_score, self.charged_emoji_count, self.charged_dark_add = 0, 0, 0, 0
	self.active = true
	self.parent = nil
	self.allow_counter = true

	go.set_scale(.6)
	particlefx.play("#particles")
	particlefx.set_constant("#particles", "emitter", "tint", vmath.vector4(1, .6, .2, .86))
	particlefx.set_constant("#particles", "longer",  "tint", vmath.vector4(1, .6, .2, .78))
	tint = vmath.vector4(1, .74, .44, 1) * darkness_level
	particlefx.set_constant("#particles", "emitter_light", "tint", tint)

	timer.delay(1.2, false, function()
		pprint(#discharge_table[self.parent].objects)
		if #discharge_table[self.parent].objects == 0 then
			self.charged_combo_count = discharge_table[self.parent].counter.amount
			self.charged_emoji_count = discharge_table[self.parent].counter.charged
			self.charged_combo_score = discharge_table[self.parent].counter.score
			self.charged_dark_add = discharge_table[self.parent].counter.dark
			self.x = discharge_table[self.parent].counter.pos.x
			self.y = discharge_table[self.parent].counter.pos.y

			-- self.x = 0
			-- for a = 1, #discharge_table

			discharge_table[self.parent] = nil
			self.allow_counter = true
			pprint("removed")
		else
			pprint("removed entry")
			table.remove(discharge_table[self.parent].objects, self.num)
		end

		if self.allow_counter then
			msg.post("game_layer2:/main#ctrl", "show charged_combo display", {amount = self.charged_combo_count, score = self.charged_combo_score, charged = self.charged_emoji_count, dark = self.charged_dark_add, pos = {x = self.x, y = self.y}})
		end
		go.delete()
	end)
end


function on_message(self, message_id, message)
	if message.group == hash("emoji") then
		local emoji, going_away, id

		local emoji = msg.url(nil, message.other_id, "emoji")
		local collide_weapon = msg.url(nil, message.other_id, "collide_weapon")
		local charged = go.get(emoji, "going_away")
		local active = go.get(emoji, "active")

		msg.post(emoji, "kill emoji", {id = go.get_id()})

		if charged and active then
			self.active = false
			self.allow_counter = false
			id = factory.create("/main#discharge_factory", go.get_position(emoji))
			msg.post(id, "assign child", {id = self.parent, num = self.num})
			pprint("assign child")
		end
	end


	if message_id == hash("create parent") then
		self.parent = go.get_id()
		self.num = 0
		discharge_table[self.parent] = {counter = {charged = 0, amount = 0, score = 0, dark = 0, pos = {x = shot_x, y = shot_y}}, objects = {}}
		--msg.post(collide_weapon, "disable")


	elseif message_id == hash("assign child") then
		self.parent = message.id
		self.num = message.num + 1
		table.insert(discharge_table[self.parent].objects, self.num)
		self.x = (discharge_table[self.parent].counter.pos.x + go.get_position().x) / #discharge_table[self.parent].objects
		self.y = (discharge_table[self.parent].counter.pos.y + go.get_position().y) / #discharge_table[self.parent].objects
		discharge_table[self.parent].counter.pos.x = self.x
		discharge_table[self.parent].counter.pos.y = self.y


	elseif message_id == hash("count charged_kill") then
		self.charged_combo_count = self.charged_combo_count + 1
		discharge_table[self.parent].counter.amount = self.charged_combo_count

		if message.charged then self.charged_emoji_count = self.charged_emoji_count + 1 end
		discharge_table[self.parent].counter.charged = self.charged_emoji_count
		
		self.charged_combo_score = self.charged_combo_score + message.score
		discharge_table[self.parent].counter.score = self.charged_combo_score

		self.charged_dark_add = self.charged_dark_add + message.dark
		discharge_table[self.parent].counter.dark = self.charged_dark_add
	end
end

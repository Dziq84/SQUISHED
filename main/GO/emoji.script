
local data = sys.load_resource("/custom_resources/common/emoji_colors.json")
local emoji_color_data = json.decode(data)


-- local variables:
local score_default = 4


go.property("dest",         vmath.vector3())
go.property("active",       true)
go.property("going_away",   false)


emojis = 10 ; level = 1  -- dummy values, will be overwriten anyway


-- local variables:
local title_emoji_check, secret_menu_activated, check_delay = 0


-- local functions:
local get_new_menu_emoji_pos, get_new_emoji_pos, emoji_escaped, emoji_waiting, sprite_flip


-- local hashes:
local hash_collision       = hash("collision_response")
local hash_contact         = hash("contact_point_response")
local hash_group_weapon    = hash("weapon")
local hash_group_discharge = hash("discharge")
local hash_group_emoji     = hash("emoji")
local hash_group_menuclick = hash("menu_right_click")
local hash_group_bomb      = hash("bomb")
local hash_group_blast     = hash("blast")
local hash_group_wave      = hash("wavepush")




function init(self)
	self.move_time         = 3.24
	self.wait              = 4.60
	self.score             = score_default
	self.dark              = 3
	self.wait_timeout      = 0
	self.waiting           = false
	self.reach_border      = false
	self.need_pos_check    = false
	self.sound_delay       = 0
	self.collide_type      = 0
	self.collide_count     = 0
	self.particle_url      = msg.url(nil, go.get_id(), "particle")
	self.particle_charging = msg.url(nil, go.get_id(), "particle_charging")
	self.emoji_id          = rnd.range(1, emoji_in_atlas)

	msg.post("#sprite", "play_animation", {id = hash("e"..self.emoji_id)})

	-- emojis for main menu
	if bonus_level_active ~= 1 then
		if main_menu_visible then
			--secret_menu_activated = false
			msg.post("#collide_emoji", "disable")
			particlefx.play(self.particle_url)
			sprite.set_constant("#sprite", "tint", vmath.vector4(.62, .76, .82, 1))
			timer.delay(1.84, false, function() msg.post("#collide_emoji", "enable") end)
			go.set_scale(math.random(36, 380) / 100)
			go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, 1.22, go.EASING_INOUTSINE, 1.5, rnd.range(6, 14) / 10)
			get_new_menu_emoji_pos(self, go.EASING_INOUTSINE, go.EASING_OUTSINE)
		else
			local delay = rnd.range(1, 6 + (emojis / 4.6) + ((level / 4.2) * (1.28 - darkness_level)))
			self.collide_emoji     = msg.url(nil, go.get_id(), "collide_emoji")
			self.collide_weapon    = msg.url(nil, go.get_id(), "collide_weapon")
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
			get_new_emoji_pos(self, go.EASING_INOUTSINE, go.EASING_OUTSINE, delay)
		end
	else
		sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		self.collide_emoji = msg.url(nil, go.get_id(), "collide_emoji")
		self.sprite_url = msg.url(nil, go.get_id(), "sprite")
	end
end




function update(self, dt)
	local pos, pos_x, pos_y

	if bonus_level_active ~= 1 then
		if main_menu_visible then
			if check_delay == nil then check_delay = socket.gettime() + 8 end

			-- >> check for amount of emojis on screen (trigger secret menu on/off)
			pos = go.get_position()
			if pos.x > 20 and pos.x < window_w - 20 and pos.y > 20 and pos.y < window_h -20 then
				if not self.need_pos_check then
					title_emoji_check = title_emoji_check + 1
					self.need_pos_check = true
				end
			else
				if self.need_pos_check then
					self.need_pos_check = false
					title_emoji_check = title_emoji_check - 1
				end
			end
			--
			if socket.gettime() > check_delay and not secret_menu_activated then
				check_delay = socket.gettime() + 2
				if title_emoji_check == 0 then
					secret_menu_activated = true
					msg.post("/main#title_screen", "show palmsy")
				end
			end
			-- <<
			
			-- disable emojis at the end of main menu
			if allow_title_emojis == false and self.active == true then
				self.active = false
				secret_menu_activated = true
				msg.post(msg.url(nil, go.get_id(), "collide_emoji"), "disable")

				pos_x, pos_y = get_offscreen_pos(400, true, go.get_position())
				go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, math.random(36, 360) / 100, go.EASING_INOUTSINE, 1.5, rnd.range(6, 14) / 10)
				go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(pos_x, pos_y, 1), go.EASING_INOUTSINE, 1.5, rnd.range(6, 14) / 10, function ()
					go.delete()
				end)
			end
		else
			pos = go.get_position()
			if pos.x > 50 and pos.x < window_w - 50 and pos.y > 50 and pos.y < window_h -50 - 44 and self.active then
				self.need_pos_check = false
				if not self.going_away then
					msg.post(self.collide_emoji, "enable")
				end
			else
				self.need_pos_check = true
				msg.post(self.collide_emoji, "disable")
				if self.going_away and self.active and not self.reach_border then
					self.reach_border = true
					go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.dest.y, go.EASING_LINEAR, self.move_time)
					go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.dest.x - self.radius, go.EASING_LINEAR, self.move_time * .5, 0, function()
						go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.dest.x, go.EASING_LINEAR, self.move_time * .5, 0, function()
							emoji_reached_dest(self)
						end)
					end)
				end
			end
		end
	end
end




function get_new_menu_emoji_pos(self, easing1, easing2)
	local pos_x, pos_y
	local radius, x, y

	radius = rnd.range(40, 160)
	time = rnd.range(2, 12)

	pos_x = rnd.range(50 + 20, window_w - 20 - 50)
	pos_y = rnd.range(50 + 20, window_h - 20 - 50)
	self.dest = vmath.vector3(pos_x, pos_y, 1)
	sprite_flip(pos_x)

	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, pos_y, easing1, time)
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos_x - radius, easing2, time * 0.5, 0, function()
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos_x, easing2, time * 0.5, 0, function()
			if allow_title_emojis == true then get_new_menu_emoji_pos(self, 0, easing1, easing2) end
		end)
	end)
end




function get_new_emoji_pos(self, easing1, easing2, delay)
	if self.active == true then
		local pos_x, pos_y, time, method
		local radius, x, y
		local dist_add = bonus_level_active == 1 and 50 or 0

		if bonus_level_active == 1 then
			self.active = false
			time = 3.2
			pos_x, pos_y = get_offscreen_pos(80 + dist_add, 1, go.get_position())
		else
			time = self.move_time - (speed * (self.move_time / 100)) + (1.6 * darkness_level)
			--print("time1: "..time)

			if not self.going_away then
				time = time + math.random(1, 6)
				pos_x = rnd.range(80 + 50, window_w - 80 - 50)
				pos_y = rnd.range(80 + 50, window_h - 120 - 50)
				-- radius = rnd.range(40, 160)
			else
				if self.need_pos_check then
					method = 2
					time = (time * 10.48) - (level / 8)
				else
					method = 1
					time = (time * 8.62)  - (level / 8)
					print("time2: "..time)
				end
				pos_x, pos_y = get_offscreen_pos(80 + dist_add, method, go.get_position())
				--radius = rnd.range(26, 82)
			end
		end

		self.dest = vmath.vector3(pos_x, pos_y, 1)
		self.radius = rnd.range(40, 160)
		sprite_flip(pos_x)

		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, pos_y, easing1, time, delay)
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos_x - self.radius, easing2, time * .5, delay, function()
			go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos_x, easing2, time * .5, 0, function()
				emoji_reached_dest(self)
			end)
		end)
	end
end




function emoji_reached_dest(self)
	if not self.going_away then
		--self.need_pos_check = false
		emoji_waiting(self)
		--particlefx.stop(self.particle_charging)
	else
		if health > 0 and bonus_level_active ~= 1 and self.active then
			self.active = false
			sound.play("game_layer1:/main#energy_loss", {speed = math.random(80, 120) / 100})
			emojis_left = emojis_left - 1
			escaped = escaped + 1
			health = health - 1
			stat_health_loss = stat_health_loss + 1
			change_darkness(10)
			msg.post("game_layer2:/main#game_gui", "display_update", {stat = "health loss"})
		end
		particlefx.stop(self.particle_url)
	end
end




function emoji_waiting(self)
	local light_level = bonus_level_active and darkness_level_temp or darkness_level
	local tint

	if self.active then
		if self.wait_timeout == 0 then
			self.wait_timeout = self.wait - (speed * (self.wait / 100)) + math.random(2, 6) + ((level / 5.6) * (1.76 - light_level)) + socket.gettime()
			self.waiting = true
			self.score = score_default / 2
			pos = go.get_position()
			sprite_flip(pos.x, true, false)
			particlefx.play(self.particle_charging)
			particlefx.set_constant(self.particle_charging, "emitter", "tint", vmath.vector4(.38, .42, .72, .64))
			tint = vmath.vector4(.62, .66, .88, .86) * light_level
			particlefx.set_constant(self.particle_charging, "emitter_light", "tint", tint)
		end

		if socket.gettime() >= self.wait_timeout and self.going_away == false then
			--if bonus_level_active == 1 then particlefx.play(self.particle_url) end
			particlefx.stop(self.particle_charging)
			go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, go.get_scale() * 1.32, go.EASING_OUTSINE, .44, 0, function()
				go.cancel_animations(".", "position")
				msg.post(self.collide_emoji, "disable")
				self.waiting = false
				self.going_away = true
				self.score = score_default / 4
				sound.play("game_layer1:/main#emoji_going_away", {speed = (math.random(80, 120) / 100) * proxy_speed})

				particlefx.play(self.particle_url)
				particlefx.set_constant(self.particle_url, "emitter", "tint", vmath.vector4(1, .6, .2, .76))
				tint = vmath.vector4(1, .74, .44, 1) * light_level
				particlefx.set_constant(self.particle_url, "emitter_light", "tint", tint)

				get_new_emoji_pos(self, go.EASING_INOUTSINE, go.EASING_INOUTSINE, .12)
			end)
		else
			local pos = go.get_position()
			pos.x = pos.x + math.random(-22, 22) ; 	pos.y = pos.y + math.random(-22, 22)
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_INOUTSINE, math.random(2, 4), 0, function()
				if self.going_away == false then
					emoji_waiting(self)
				end
			end)
		end
	end
end




function sprite_flip(pos, reset, flip)
	local rot

	if reset ~= nil then
		rot = 0
	else
		rot = go.get_position().x < pos and -10 or 10
	end
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, rot, go.EASING_INOUTSINE, .4)
	if flip == nil or flip == true then
		sprite.set_hflip(".", go.get_position().x < pos)
	end
end




function on_message(self, message_id, message, sender)
	local a, z, id, pos, pos_x, pos_y, force, distance, time, play_sound, multiplier, combo_charged
	local blood_scale = {20, 15, 60, 45}


	-- for main menu
	if main_menu_visible == true then

		if message_id == hash("set title_emoji_check") then
			secret_menu_activated = false
			check_delay = nil
			title_emoji_check = 0
		end

		if self.collide_type == 0 then
			if math.random(1, 400) <= 360 then
				self.collide_type = 1
				particlefx.set_constant(self.particle_url, "emitter", "tint", vmath.vector4(.52, .56, .78, .84))
				particlefx.set_constant(self.particle_url, "emitter_light", "tint", vmath.vector4(.52, .56, .78, .84 * darkness_level))
			else
				self.collide_type = 2
				particlefx.set_constant(self.particle_url, "emitter", "tint", vmath.vector4(1, .6, .2, .68) * 1.24)
				particlefx.set_constant(self.particle_url, "emitter_light", "tint", vmath.vector4(1, .74, .44, .96 * darkness_level) * 1.6)
			end
		end

		if message_id == hash_contact and self.active == true then
			pos = go.get_position()
			sprite_flip(pos.x, true)

			if self.collide_type == 1 then
				force = rnd.range(44, 88) / 10
				distance = rnd.range(8, 32)
				time = rnd.range(18, 40) / 10
				self.dest = pos + (message.normal * force) * (message.distance * distance)
				self.collide = -1
				go.cancel_animations(".", "position")
			elseif self.collide_type == 2 then
				force = 1
				distance = 1.2
				time = rnd.range(18, 36) / 10
				self.collide = -1
			end


			if message.group == hash_group_menuclick then
				force = 20
				distance = rnd.range(28, 62) / 10
				time = rnd.range(10, 24) / 10
				self.dest = pos + (message.normal * force) * (message.distance * distance)


			elseif message.group == hash_group_emoji then
				other_dest = go.get(msg.url(nil, message.other_id, "emoji"), "dest")

				if self.dest.x < other_dest.x + 60 and self.dest.x > other_dest.x - 60 then
					self.dest.x = pos.x
				end
				if self.dest.y < other_dest.y + 60 and self.dest.y > other_dest.y - 60 then
					self.dest.y = pos.y
				end
			end

			go.set_position(pos + message.normal * message.distance)
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.dest, go.EASING_OUTSINE, time, 0, function()
				self.collide_type = 0
				get_new_menu_emoji_pos(self, go.EASING_INOUTSINE, go.EASING_OUTSINE)
			end)
		end




	-- for levels
	else
		if bonus_level_active ~= 1 then
			local sound_type, sound_speed

			-- collide with weapon
			if message_id == hash("kill emoji") and (self.active or message.force == true) then

				emojis_left = emojis_left - 1
				killed = killed + 1
				stat_kills = stat_kills + 1
				bullet_is_hit = true
				combo_charged = false

				if emojis_left > 0 then
					sound_speed = (math.random(66, 122) / 100)
				else
					sound_speed = (math.random(18, 30) / 100)
				end

				if self.going_away then
					particlefx.stop(self.particle_url)
					sound.stop("game_layer1:/main#emoji_going_away")
					sound_type = "game_layer1:/main#squeak_big"
					combo_charged = true
				else
					particlefx.stop(self.particle_charging)
					sound_type = "game_layer1:/main#squeak_small"
				end
				msg.post(message.id, "count charged_kill", {score = self.score, dark = self.dark, charged = combo_charged})

				sound.play(sound_type, {speed = sound_speed * proxy_speed, gain = math.random(80, 120) / 100 })

				self.active = false
				msg.post(self.collide_emoji,  "disable")
				msg.post(self.collide_weapon, "disable")
				go.cancel_animations(".", "position")
				go.cancel_animations(".", "scale")
				pos = go.get_position()
				go.set_position(vmath.vector3(pos.x, pos.y, .8))
				go.set_rotation(vmath.quat_rotation_z(math.random(0, 360)))
				make_blood(self, pos, blood_scale)




			elseif message_id == hash_contact and self.active == true then
				pos = go.get_position() + message.normal * (message.distance * 1.22)

				-- collide with other emojis
				if message.group == hash_group_emoji then

					if not self.need_pos_check then
						self.collide_count = self.collide_count + 1
					end

					other_dest = go.get(msg.url(nil, message.other_id, "emoji"), "dest")
					--if self.need_pos_check then play_sound = false else play_sound = true end    - not needed if collisions are off
					play_sound = true

					if self.collide_count < 120 then
						if self.dest.x < other_dest.x + 60 and self.dest.x > other_dest.x - 60 then
							self.dest.x = pos.x
							play_sound = false
						end
						if self.dest.y < other_dest.y + 60 and self.dest.y > other_dest.y - 60 then
							self.dest.y = pos.y
							play_sound = false
						end
					else
						--print("collide_count reached")
						self.dest.x = pos.x
						self.dest.y = pos.y
					end

					if play_sound and socket.gettime() > self.sound_delay then
						sound.play("game_layer1:/main#emoji_collide", {speed = (math.random (14, 24) / 10) * proxy_speed})
						self.sound_delay = socket.gettime() + 0.1
					end

					--if self.active then
						time = rnd.range(26, 44) / 10
						--time = time + (time * speed / 100)

						go.set_position(pos)
						go.cancel_animations(".", "position")
						sprite_flip(pos.x, true, false)
						go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.dest, go.EASING_OUTSINE, time, 0, function()
							if self.need_pos_check == true then
								get_new_emoji_pos(self, go.EASING_INOUTSINE, go.EASING_OUTSINE, 0)
							else
								emoji_waiting(self)
							end
						end)
					--end


				-- collide with bombs
				elseif message.group == hash_group_bomb and not self.going_away then
					pos = go.get_position() + message.normal * (message.distance * 1.22)
					go.set_position(pos)
					if self.waiting then
						go.cancel_animations(".", "scale")
						go.set_scale(1)
						self.waiting = false
						self.wait_timeout = 0
					end
					get_new_emoji_pos(self, go.EASING_INOUTSINE, go.EASING_OUTSINE, 0)


				-- collide with deadly blast
				elseif message.group == hash_group_blast and self.active then
					emojis_left = emojis_left - 1
					killed = killed + 1
					self.active = false
					msg.post(self.collide_emoji, "disable")
					go.cancel_animations(".", "position")
					go.cancel_animations(".", "scale")
					pos = go.get_position() + message.normal * (message.distance * math.random(1, 2))
					go.set_position(vmath.vector3(pos.x, pos.y, .8))
					go.set_rotation(vmath.quat_rotation_z(math.random(1, 360)))
					make_blood(self, pos, blood_scale, 1.4)

					timer.delay(.1, false, function()
						if self.waiting then
							particlefx.stop(self.particle_charging)
						elseif self.going_away then
							particlefx.stop(self.particle_url)
						end
					end)

					msg.post(bomb_url, "count charged_kill", {score = self.score, dark = self.dark, charged = false})


				-- collide with explosion wave
				elseif message.group == hash_group_wave and self.active then
					pos = go.get_position() + message.normal * (message.distance * math.random(2, 4))

					self.reach_border = true
					if self.waiting then
						self.collide_type = 1
						go.cancel_animations(".", "scale")
						go.set_scale(1)
						self.waiting = false
						self.wait_timeout = 0
						self.score = score_default
						--if self.waiting then
							particlefx.stop(self.particle_charging)
						--end
					end

					sprite_flip(pos.x)
					go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_OUTSINE, 1, 0, function()
						if self.collide_type == 1 and not self.need_pos_check then
							emoji_waiting(self)
						elseif self.collide_type == 0 or self.need_pos_check then
							get_new_emoji_pos(self, go.EASING_INOUTSINE, go.EASING_INOUTSINE, 0)
						end
						self.collide_type = 0
					end)
				end
			end




		-- bonus level handling:
		else
			if message.group == hash_group_weapon and self.active == true then
				local sound_type, sound_speed

				self.active = false
				go.set(self.sprite_url, "tint.w", 1)
				pos = go.get_position()
				go.set_position(vmath.vector3(pos.x, pos.y, .8))

				if go.get_scale().x == 1 then
					bonus_score = bonus_score + 10
					stat_score = stat_score + 10
					bonus_level_kills.small = bonus_level_kills.small + 1
					make_blood(self, pos, blood_scale)
					sound_type = "game_layer1:/main#squeak_small"
					sound_speed = (math.random(60, 120) / 100)
				else
					bonus_score = bonus_score + 50
					stat_score = stat_score + 50
					bonus_level_kills.big = bonus_level_kills.big + 1
					make_blood(self, pos, blood_scale, 1.6)
					sound_type = "game_layer1:/main#squeak_big"
					sound_speed = (math.random(20, 35) / 100)
				end

				stat_kills = stat_kills + 1

				sound.play(sound_type, {speed = sound_speed * proxy_speed, gain = math.random(80, 120) / 100 })
				msg.post("game_layer2:/main#ctrl", "reset anim", {visible = true})
				msg.post("game_layer2:/main#game_gui", "bonus_display_update")


			elseif message_id == hash_collision and self.active == true then
				if go.get_scale(".").x == 1 then multiplier = 1 else multiplier = 2 end
				pos_x, pos_y = get_onscreen_pos(10, multiplier)
				go.set_position(vmath.vector3(pos_x, pos_y, 1))
			end
		end




		if message_id == hash("orb charge add") then
			if self.waiting then
				self.wait_timeout = self.wait_timeout + math.random(18, 38) / 10
			end




		elseif message_id == hash("clean_emojis") then
			for a = 1, table.maxn(emoji_table) do
				self.active = false
				go.animate(emoji_table[a], "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0,0,0), go.EASING_INSINE, 2, 0, function()
					go.delete(emoji_table[a])

					if a == table.maxn(emoji_table) then
						if message.continue then
							wait_for_clean = false
						end
					end
				end)
			end




		elseif message_id == hash("bonus level emoji at end") then
			self.wait_timeout = message.timeout
			timer.delay(message.delay, false, function()
				sound.play("/main#plumk", {gain = 0.22, speed = math.random(100, 200) / 100})
			end)
			go.animate(self.sprite_url, "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INSINE, .2, message.delay, function()
				if self.active then emoji_waiting(self) end
			end)
			msg.post("#collide_emoji", "disable")
		end

	end
end




function make_blood(self, pos, blood_scale, multiplier, cursor_check)
	if multiplier == nil then multiplier = 1 end

	for a = 1, 4 do
		-- blood 1 and 2 is under sprite
		-- blood 4 is between cursor and emoji
		if a <= 2 then z = .4 else z = .9 end
		if a == 4 and cursor_check == nil then
			if cursor_x > pos.x then
				pos_x = cursor_x - (cursor_x - pos.x) / 2
			elseif cursor_x < pos.x then
				pos_x = cursor_x + (pos.x - cursor_x) / 2
			else
				pos_x = pos.x
			end

			if cursor_y > pos.y then
				pos_y = cursor_y - (cursor_y - pos.y) / 2
			elseif cursor_y < pos.y then
				pos_y = cursor_y + (pos.y - cursor_y) / 2
			else
				pos_y = pos.y
			end
		else
			pos_x = pos.x + math.random(-8, 8)
			pos_y = pos.y + math.random(-8, 8)
		end

		msg.post("game_layer2:/main#ctrl", "spawn_blood", {a = a, x = pos_x, y = pos_y, z = z, scale = blood_scale[a] * multiplier, multiplier = multiplier, color = emoji_color_data["e"..self.emoji_id]})
	end
end


go.property("mat1", resource.material("/builtins/fonts/label.material"))
go.property("mat2", resource.material("/main/render/materials/light_label.material"))




function on_message(self, message_id, message)
	local old_score, multiplier, text, tex_len, charged
	local ax, ay, x, y = 60, 46    -- default position for text to appear
	local scale, attack, sustain, release

	if message_id == hash("charged_combo text -final") then
		if message.amount == 1 and message.charged == 1 or message.charged == 0 and message.amount > 0 then
			text = tostring(message.score)
			scale, attack, sustain, release = .52, .4, .2, .16
		elseif message.amount > 0 and message.charged > 0 then
			go.set("#+",     "color", vmath.vector4(.1, 1, .44, 1))
			go.set("#count", "color", vmath.vector4(.1, 1, .44, 1))
			go.set("#+",     "outline", vmath.vector4(0,0,0,1))
			go.set("#count", "outline", vmath.vector4(0,0,0,1))

			old_score = score
			multiplier = (message.amount - message.charged) + (2 * message.charged)
			score = score + (message.score * multiplier)
			darkness_level = darkness_level - (message.amount / 1000)
			text = tostring(score - old_score)
			scale, attack, sustain, release = .8, 1, .8, .42
		else
			if score > 0 then
				go.set("#+",     "color", vmath.vector4(1, .2, .06, 1))
				go.set("#count", "color", vmath.vector4(1, .2, .06, 1))
				label.set_text("#+", "-")
				text = tostring(bullet_miss)
			else
				label.set_text("#+", "")
				text = ""
			end
			scale, attack, sustain, release = .52, .4, .2, .16
		end

		tex_len = #text
		x, y = ax * scale, ay * scale
		label.set_text("#count", text)
		--pprint("charged_emojis: "..message.charged.."    combo_amount: "..message.amount.."    score_result:"..text)




		if shot_x + x + (72 * scale * tex_len) >= window_w then x = -x + (window_w - cursor_x) - (48 * scale * tex_len) end
		if shot_y + y + 72 * scale >= window_h - 72 * scale then y = -y - 22 * scale end

		go.set_scale(0.01)
		go.set_position(vmath.vector3(shot_x, shot_y, 1))

		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, attack)
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, shot_x + x, go.EASING_OUTSINE, attack + (attack * 1.4))
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, shot_y + y, go.EASING_OUTSINE, attack + (attack * 1.4), 0, function()
			go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, 0.01, go.EASING_LINEAR, release, sustain, function()
				go.delete(".")
			end)
		end)
	end
end
